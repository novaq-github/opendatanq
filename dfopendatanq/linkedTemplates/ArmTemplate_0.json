{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dfopendatanq"
		},
		"AFAemet_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'AFAemet'"
		},
		"APK2DB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'APK2DB'"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDatabricks1_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks1'"
		},
		"AzureDatabricksDeltaLake1_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricksDeltaLake1'"
		},
		"DWH_open_data_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DWH_open_data'"
		},
		"backupfarmades_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'backupfarmades'"
		},
		"farma_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'farma'"
		},
		"nvqltalmactempfarmades_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'nvqltalmactempfarmades'"
		},
		"pefformance_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'pefformance'"
		},
		"storage_avron_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'storage_avron'"
		},
		"AFAemet_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://afaemet.azurewebsites.net"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://opendatanq.dfs.core.windows.net/"
		},
		"AzureDatabricks1_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0625-073029-ghho04up"
		},
		"scr_aemet_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().url_datos_aemet}"
		},
		"storage_avron_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nvqltopendatanqdes.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AFAemet')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AFAemet_properties_typeProperties_functionAppUrl')]",
					"authentication": "Anonymous",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AFAemet_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/APK2DB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('APK2DB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4328832190040648.8.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks1_accessToken')]"
					},
					"existingClusterId": "[parameters('AzureDatabricks1_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricksDeltaLake1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-4328832190040648.8.azuredatabricks.net",
					"clusterId": "0625-073029-ghho04up",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricksDeltaLake1_accessToken')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWH_open_data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('DWH_open_data_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/backupfarmades')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('backupfarmades_connectionString')]",
					"fileShare": "backupfarmades"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/farma')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"bbdd": {
						"type": "string",
						"defaultValue": "farma"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('farma_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/nvqltalmactempfarmades')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('nvqltalmactempfarmades_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pefformance')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('pefformance_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/scr_aemet')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"url_datos_aemet": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('scr_aemet_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_avron')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('storage_avron_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('storage_avron_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/todos_los_viernes_tarde')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-10-23T18:14:00",
						"timeZone": "W. Europe Standard Time",
						"schedule": {
							"hours": [
								20
							],
							"weekDays": [
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger4_borrar')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 15,
						"startTime": "2024-02-01T18:43:00",
						"endTime": "2024-02-02T18:43:00",
						"timeZone": "Romance Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								23
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntimelocal')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntimelocal2')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/nvqltintruntimedes')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "Integration runtime acceso red interna nvqlt",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/1 AEMET PREDICCION_DIARIA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Descarga predicciones diarias",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "prediccionesAemet",
							"headers": {},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "AFAemet",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 Source to Data_Lake"
				},
				"annotations": [],
				"lastPublishTime": "2024-04-10T11:21:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AFAemet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3 datos farms a DWH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DV DIRECCIONES",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "INSERT INTO MAESTROS.LINK_DIRECCIONES\r\n    (hash_direccion, hash_codigo_provincia, hash_codigo_municipio, hash_codigo_tipo_via, [Código Postal], [Nombre de la vía], [Número Vía], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_direccion, \r\n    hash_codigo_provincia, \r\n    hash_codigo_municipio, \r\n    hash_codigo_tipo_via, \r\n    [Código Postal], \r\n    [Nombre de la vía], \r\n    [Número Vía], \r\n    LOAD_DTS \r\nFROM \r\n    farma.staging.vista_direcciones_hash d\r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.LINK_DIRECCIONES l WHERE l.hash_direccion = d.hash_direccion);\r\n\r\nINSERT INTO MAESTROS.HUB_TIPO_VIA \r\n    (hash_codigo_tipo_via, [Código Tipo Vía], LOAD_DTS)\r\nSELECT \r\n    d.hash_codigo_tipo_via, \r\n    d.[Código Tipo Vía], \r\n    LOAD_DTS\r\nFROM \r\n    staging.vista_direcciones_hash d\r\nWHERE     NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_VIA htv WHERE htv.hash_codigo_tipo_via = d.hash_codigo_tipo_via)\r\n;\r\n\r\nINSERT INTO MAESTROS.HUB_municipio\r\n    (hash_codigo_municipio, Municipio, [Código Municipio], LOAD_DTS)\r\nSELECT DISTINCT \r\n    d.hash_codigo_municipio, \r\n    d.Municipio, \r\n    d.[Código Municipio], \r\n    d.LOAD_DTS  LOAD_DTS\r\n    FROM \r\n    staging.vista_direcciones_hash d\r\nWHERE  NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_municipio hm WHERE hm.hash_codigo_municipio = d.hash_codigo_municipio)\r\n;\r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.vista_direcciones_hash Stg \r\n       INNER JOIN MAESTROS.SAT_DIRECCIONES Sat\r\n           ON  Sat.hash_direccion      = Stg.hash_direccion\r\n WHERE Sat.hash_diff <> Stg.[hash_diff]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ; \r\n\r\nINSERT INTO MAESTROS.SAT_DIRECCIONES \r\n    (hash_direccion, direccion_normalizada, lat, lng, geocodificador, cp, dq, START_DTS, END_DTS,hash_diff)\r\nSELECT DISTINCT \r\n    d.hash_direccion, \r\n    d.direccion_normalizada, \r\n    d.lat, \r\n    d.lng, \r\n    d.geocodificador, \r\n    d.cp, \r\n    d.dq, \r\n    d.LOAD_DTS START_DTS, \r\n    NULL END_DTS,\r\n    hash_diff\r\n--INTO MAESTROS.SAT_DIRECCIONES\r\n    FROM \r\n    staging.vista_direcciones_hash d    \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.SAT_DIRECCIONES sd WHERE sd.hash_direccion = d.hash_direccion AND sd.hash_diff = d.hash_diff);\r\n      \r\nINSERT INTO MAESTROS.HUB_PROVINCIA \r\n    (hash_codigo_provincia, Provincia, [Código Provincia], LOAD_DTS)\r\nSELECT DISTINCT\r\n    hash_codigo_provincia, \r\n    Provincia, \r\n    [Código Provincia], \r\n    LOAD_DTS\r\n--INTO MAESTROS.HUB_PROVINCIA  \r\nFROM \r\n    farma.staging.vista_direcciones_hash d\r\nWHERE     NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_PROVINCIA l WHERE l.hash_codigo_provincia = d.hash_codigo_provincia)\r\n;\r\n\r\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "DV CENTROS",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DV DIRECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "\r\n\r\nINSERT INTO MAESTROS.HUB_CODIGO_CENTRO \r\n    (hash_codigo_centro, [Código de Centro Normalizado REGCESS (CCN)], LOAD_DTS)\r\nSELECT \r\n    DISTINCT hash_codigo_centro, \r\n    [Código de Centro Normalizado REGCESS (CCN)], \r\n    LOAD_DTS\r\n--INTO MAESTROS.HUB_CODIGO_CENTRO \r\n    FROM \r\n    farma.staging.hash_centros_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_CODIGO_CENTRO WHERE hash_codigo_centro = farma.staging.hash_centros_view.hash_codigo_centro);\r\n   \r\n INSERT INTO MAESTROS.HUB_TIPO_CENTRO \r\n    (hash_tipo_centro, [Tipo centro], LOAD_DTS)\r\nSELECT \r\n    DISTINCT hash_tipo_centro, \r\n    [Tipo centro], \r\n    LOAD_DTS\r\n--INTO MAESTROS.HUB_TIPO_CENTRO \r\n    FROM \r\n    farma.staging.hash_centros_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_CENTRO WHERE hash_tipo_centro = farma.staging.hash_centros_view.hash_tipo_centro)\r\n   ;\r\n  \r\n  INSERT INTO MAESTROS.HUB_DEPENDENCIA_FUNCIONAL \r\n    (hash_dependencia_funcional, [Dependencia  Funcional], LOAD_DTS)\r\nSELECT \r\n    DISTINCT hash_dependencia_funcional, \r\n    [Dependencia  Funcional], \r\n    LOAD_DTS\r\n--INTO MAESTROS.HUB_DEPENDENCIA_FUNCIONAL \r\n    FROM \r\n    farma.staging.hash_centros_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_DEPENDENCIA_FUNCIONAL WHERE hash_dependencia_funcional = farma.staging.hash_centros_view.hash_dependencia_funcional);\r\n   \r\n   INSERT INTO MAESTROS.HUB_GRUPO_FUNCIONAL \r\n    (hash_grupo_funcional, [Grupo de dependencia  Funcional], LOAD_DTS)\r\nSELECT \r\n    DISTINCT hash_grupo_funcional, \r\n    [Grupo de dependencia  Funcional], \r\n    LOAD_DTS\r\n--INTO MAESTROS.HUB_GRUPO_FUNCIONAL\r\n    FROM \r\n    farma.staging.hash_centros_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_GRUPO_FUNCIONAL WHERE hash_grupo_funcional = farma.staging.hash_centros_view.hash_grupo_funcional);\r\n   \r\n   INSERT INTO MAESTROS.HUB_TIPO_AUTORIZACION \r\n    (hash_tipo_autorizacion, [Tipo de última Autorización], LOAD_DTS)\r\nSELECT \r\n    DISTINCT hash_tipo_autorizacion, \r\n    [Tipo de última Autorización], \r\n    LOAD_DTS\r\n--INTO MAESTROS.HUB_TIPO_AUTORIZACION \r\n    FROM \r\n    farma.staging.hash_centros_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_AUTORIZACION WHERE hash_tipo_autorizacion = farma.staging.hash_centros_view.hash_tipo_autorizacion);\r\n   \r\n\r\n   \r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.hash_centros_view Stg \r\n       INNER JOIN MAESTROS.SAT_CENTRO Sat\r\n           ON  Sat.hash_codigo_centro      = Stg.hash_codigo_centro\r\n WHERE Sat.hash_diff <> Stg.[hash_diff]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ;    \r\n   \r\n   \r\nINSERT INTO MAESTROS.SAT_CENTRO \r\n    (hash_codigo_centro, \r\n    [Nombre Centro], \r\n    [Código Comunidad Autónoma], \r\n    [Correo  Electrónico], \r\n    Fax, \r\n    Teléfono, \r\n    Url, \r\n    [Fecha Autorización  de Funcionamiento], \r\n    [Fecha de última  Autorización],\r\n     START_DTS,\r\n     END_DTS,\r\n     hash_diff)\r\nSELECT \r\n    DISTINCT hash_codigo_centro, \r\n    [Nombre Centro], \r\n    [Código Comunidad Autónoma], \r\n    [Correo  Electrónico], \r\n    Fax, \r\n    Teléfono, \r\n    Url, \r\n    [Fecha Autorización  de Funcionamiento], \r\n    [Fecha de última  Autorización],\r\n    LOAD_DTS  START_DTS,\r\n    NULL  END_DTS,\r\n    hash_diff    \r\n--INTO MAESTROS.SAT_CENTRO \r\n    FROM \r\n    farma.staging.hash_centros_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.SAT_CENTRO WHERE hash_codigo_centro = farma.staging.hash_centros_view.hash_codigo_centro AND hash_diff=hash_centros_view.hash_diff);\r\n   \r\n   \r\n   \r\n   \r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.hash_centros_view Stg \r\n       INNER JOIN MAESTROS.LINK_CENTRO_DIRECCION Sat\r\n           ON  Sat.hash_codigo_centro      = Stg.hash_codigo_centro\r\n WHERE Sat.hash_direccion <> Stg.[hash_direccion]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ;    \r\n \r\n   \r\nINSERT INTO MAESTROS.LINK_CENTRO_DIRECCION \r\n    ( hash_codigo_centro,\r\n     hash_direccion,\r\n     START_DTS,\r\n     END_DTS)   \r\n   SELECT \r\n    DISTINCT hash_codigo_centro, hash_direccion , LOAD_DTS START_DTS, NULL END_DTS\r\n--INTO MAESTROS.LINK_CENTRO_DIRECCION\r\nFROM \r\n    farma.staging.hash_centros_view    \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.LINK_CENTRO_DIRECCION \r\n   \t\t\t\tWHERE hash_codigo_centro = farma.staging.hash_centros_view.hash_codigo_centro AND\r\n   \t\t\t    hash_direccion =farma.staging.hash_centros_view.hash_direccion );\r\n   \r\n   \r\n\r\n\r\n\r\n\r\n  \r\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "DV medicos",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DV CENTROS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "-- 1. HUB_CODIGO_CENTRO\r\nINSERT INTO MAESTROS.HUB_CODIGO_CENTRO \r\n    (hash_codigo_centro, [Código de Centro Normalizado REGCESS (CCN)], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_codigo_centro, \r\n    [Código de Centro Normalizado REGCESS (CCN)], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_medicos_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_CODIGO_CENTRO WHERE hash_codigo_centro = farma.staging.hash_medicos_view.hash_codigo_centro);\r\n\r\n-- 2. HUB_TIPO_CENTRO\r\nINSERT INTO MAESTROS.HUB_TIPO_CENTRO \r\n    (hash_tipo_centro, [Tipo centro], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_tipo_centro, \r\n    [Tipo centro], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_medicos_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_CENTRO WHERE hash_tipo_centro = farma.staging.hash_medicos_view.hash_tipo_centro);\r\n\r\n-- 3. HUB_DEPENDENCIA_FUNCIONAL\r\nINSERT INTO MAESTROS.HUB_DEPENDENCIA_FUNCIONAL \r\n    (hash_dependencia_funcional, [Dependencia  Funcional], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_dependencia_funcional, \r\n    [Dependencia  Funcional], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_medicos_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_DEPENDENCIA_FUNCIONAL WHERE hash_dependencia_funcional = farma.staging.hash_medicos_view.hash_dependencia_funcional);\r\n\r\n-- 4. HUB_GRUPO_FUNCIONAL\r\nINSERT INTO MAESTROS.HUB_GRUPO_FUNCIONAL \r\n    (hash_grupo_funcional, [Grupo de dependencia  Funcional], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_grupo_funcional, \r\n    [Grupo de dependencia  Funcional], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_medicos_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_GRUPO_FUNCIONAL WHERE hash_grupo_funcional = farma.staging.hash_medicos_view.hash_grupo_funcional);\r\n\r\n-- 5. HUB_TIPO_AUTORIZACION\r\nINSERT INTO MAESTROS.HUB_TIPO_AUTORIZACION \r\n    (hash_tipo_autorizacion, [Tipo de última Autorización], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_tipo_autorizacion, \r\n    [Tipo de última Autorización], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_medicos_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_AUTORIZACION WHERE hash_tipo_autorizacion = farma.staging.hash_medicos_view.hash_tipo_autorizacion);\r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.hash_centros_view Stg \r\n       INNER JOIN MAESTROS.SAT_CENTRO Sat\r\n           ON  Sat.hash_codigo_centro      = Stg.hash_codigo_centro\r\n WHERE Sat.hash_diff <> Stg.[hash_diff]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ;    \r\n   \r\n\r\n\r\nINSERT INTO MAESTROS.SAT_CENTRO \r\n    (hash_codigo_centro, \r\n    [Nombre Centro], \r\n    [Código Comunidad Autónoma], \r\n    [Correo  Electrónico], \r\n    Fax, \r\n    Teléfono, \r\n    Url, \r\n    [Fecha Autorización  de Funcionamiento], \r\n    [Fecha de última  Autorización],\r\n     START_DTS,\r\n     END_DTS,\r\n     hash_diff)\r\nSELECT \r\n    DISTINCT hash_codigo_centro, \r\n    [Nombre Centro], \r\n    [Código Comunidad Autónoma], \r\n    [Correo  Electrónico], \r\n    Fax, \r\n    Teléfono, \r\n    Url, \r\n    [Fecha Autorización  de Funcionamiento], \r\n    [Fecha de última  Autorización],\r\n    LOAD_DTS  START_DTS,\r\n    NULL  END_DTS,\r\n    hash_diff    \r\n--INTO MAESTROS.SAT_CENTRO \r\n    FROM \r\n    farma.staging.hash_medicos_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.SAT_CENTRO WHERE hash_codigo_centro = farma.staging.hash_medicos_view.hash_codigo_centro AND hash_diff=hash_medicos_view.hash_diff);\r\n   \r\n\r\n   \r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.hash_centros_view Stg \r\n       INNER JOIN MAESTROS.LINK_CENTRO_DIRECCION Sat\r\n           ON  Sat.hash_codigo_centro      = Stg.hash_codigo_centro\r\n WHERE Sat.hash_direccion <> Stg.[hash_direccion]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ;    \r\n \r\n   \r\n   \r\nINSERT INTO MAESTROS.LINK_CENTRO_DIRECCION \r\n    ( hash_codigo_centro,\r\n     hash_direccion,\r\n     START_DTS,\r\n     END_DTS)   \r\n   SELECT \r\n    DISTINCT hash_codigo_centro, hash_direccion , LOAD_DTS START_DTS, NULL END_DTS\r\n--INTO MAESTROS.LINK_CENTRO_DIRECCION\r\nFROM \r\n    farma.staging.hash_medicos_view    \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.LINK_CENTRO_DIRECCION \r\n   \t\t\t\tWHERE hash_codigo_centro = farma.staging.hash_medicos_view.hash_codigo_centro AND\r\n   \t\t\t    hash_direccion =farma.staging.hash_medicos_view.hash_direccion );\r\n   "
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "DV hospitales",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DV medicos",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "-- 1. HUB_CODIGO_CENTRO\r\nINSERT INTO MAESTROS.HUB_CODIGO_CENTRO \r\n    (hash_codigo_centro, [Código de Centro Normalizado REGCESS (CCN)], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_codigo_centro, \r\n    [Código de Centro Normalizado REGCESS (CCN)], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_hospital_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_CODIGO_CENTRO WHERE hash_codigo_centro = farma.staging.hash_hospital_view.hash_codigo_centro);\r\n\r\n-- 2. HUB_TIPO_CENTRO\r\nINSERT INTO MAESTROS.HUB_TIPO_CENTRO \r\n    (hash_tipo_centro, [Tipo centro], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_tipo_centro, \r\n    [Tipo centro], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_hospital_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_CENTRO WHERE hash_tipo_centro = farma.staging.hash_hospital_view.hash_tipo_centro);\r\n\r\n-- 3. HUB_DEPENDENCIA_FUNCIONAL\r\nINSERT INTO MAESTROS.HUB_DEPENDENCIA_FUNCIONAL \r\n    (hash_dependencia_funcional, [Dependencia  Funcional], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_dependencia_funcional, \r\n    [Dependencia  Funcional], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_hospital_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_DEPENDENCIA_FUNCIONAL WHERE hash_dependencia_funcional = farma.staging.hash_hospital_view.hash_dependencia_funcional);\r\n\r\n-- 4. HUB_GRUPO_FUNCIONAL\r\nINSERT INTO MAESTROS.HUB_GRUPO_FUNCIONAL \r\n    (hash_grupo_funcional, [Grupo de dependencia  Funcional], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_grupo_funcional, \r\n    [Grupo de dependencia  Funcional], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_hospital_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_GRUPO_FUNCIONAL WHERE hash_grupo_funcional = farma.staging.hash_hospital_view.hash_grupo_funcional);\r\n\r\n-- 5. HUB_TIPO_AUTORIZACION\r\nINSERT INTO MAESTROS.HUB_TIPO_AUTORIZACION \r\n    (hash_tipo_autorizacion, [Tipo de última Autorización], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_tipo_autorizacion, \r\n    [Tipo de última Autorización], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_hospital_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_AUTORIZACION WHERE hash_tipo_autorizacion = farma.staging.hash_hospital_view.hash_tipo_autorizacion);\r\n\r\n\r\n\r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.hash_centros_view Stg \r\n       INNER JOIN MAESTROS.SAT_CENTRO Sat\r\n           ON  Sat.hash_codigo_centro      = Stg.hash_codigo_centro\r\n WHERE Sat.hash_diff <> Stg.[hash_diff]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ;    \r\n   \r\n\r\n\r\nINSERT INTO MAESTROS.SAT_CENTRO \r\n    (hash_codigo_centro, \r\n    [Nombre Centro], \r\n    [Código Comunidad Autónoma], \r\n    [Correo  Electrónico], \r\n    Fax, \r\n    Teléfono, \r\n    Url, \r\n    [Fecha Autorización  de Funcionamiento], \r\n    [Fecha de última  Autorización],\r\n     START_DTS,\r\n     END_DTS,\r\n     hash_diff)\r\nSELECT \r\n    DISTINCT hash_codigo_centro, \r\n    [Nombre Centro], \r\n    [Código Comunidad Autónoma], \r\n    [Correo  Electrónico], \r\n    Fax, \r\n    Teléfono, \r\n    Url, \r\n    [Fecha Autorización  de Funcionamiento], \r\n    [Fecha de última  Autorización],\r\n    LOAD_DTS  START_DTS,\r\n    NULL  END_DTS,\r\n    hash_diff    \r\n--INTO MAESTROS.SAT_CENTRO \r\n    FROM \r\n    farma.staging.hash_hospital_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.SAT_CENTRO WHERE hash_codigo_centro = farma.staging.hash_hospital_view.hash_codigo_centro AND hash_diff=hash_hospital_view.hash_diff);\r\n   \r\n\r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.hash_centros_view Stg \r\n       INNER JOIN MAESTROS.LINK_CENTRO_DIRECCION Sat\r\n           ON  Sat.hash_codigo_centro      = Stg.hash_codigo_centro\r\n WHERE Sat.hash_direccion <> Stg.[hash_direccion]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ;    \r\n \r\n   \r\n   \r\nINSERT INTO MAESTROS.LINK_CENTRO_DIRECCION \r\n    ( hash_codigo_centro,\r\n     hash_direccion,\r\n     START_DTS,\r\n     END_DTS)   \r\n   SELECT \r\n    DISTINCT hash_codigo_centro, hash_direccion , LOAD_DTS START_DTS, NULL END_DTS\r\n--INTO MAESTROS.LINK_CENTRO_DIRECCION\r\nFROM \r\n    farma.staging.hash_hospital_view    \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.LINK_CENTRO_DIRECCION \r\n   \t\t\t\tWHERE hash_codigo_centro = farma.staging.hash_hospital_view.hash_codigo_centro AND\r\n   \t\t\t    hash_direccion =farma.staging.hash_hospital_view.hash_direccion );\r\n \r\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3 STG TO DWH"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-18T12:18:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/farma')]"
			]
		}
	]
}