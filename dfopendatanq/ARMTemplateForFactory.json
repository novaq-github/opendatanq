{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nombre de instancia de Data Factory",
			"defaultValue": "dfopendatanq"
		},
		"AFAemet_functionKey": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"functionKey\"de \"AFAemet\""
		},
		"APK2DB_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"APK2DB\""
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"AzureBlobStorage1\""
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"accountKey\"de \"AzureDataLakeStorage1\""
		},
		"DWH_open_data_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"DWH_open_data\""
		},
		"Odbc1_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"Odbc1\""
		},
		"Odbc1_password": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"password\"de \"Odbc1\""
		},
		"backupfarmades_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"backupfarmades\""
		},
		"farma_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"farma\""
		},
		"geoloc_desarrollo_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"geoloc_desarrollo\""
		},
		"nvqltalmactempfarmades_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"nvqltalmactempfarmades\""
		},
		"pefformance_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"pefformance\""
		},
		"storage_avron_accountKey": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"accountKey\"de \"storage_avron\""
		},
		"AFAemet_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://afaemet.azurewebsites.net"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://opendatanq.dfs.core.windows.net/"
		},
		"Odbc1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "nquser"
		},
		"scr_aemet_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().url_datos_aemet}"
		},
		"storage_avron_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nvqltopendatanqdes.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/1 AEMET ESTACIONES_METEOROLOGICAS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "peticion_url_estaciones",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"api_key": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyaWNhcmRvLmNhbWFjaG9Abm92YXF1YWxpdHkuZXMiLCJqdGkiOiIxMjljNWQzYS1jZWFlLTQ5ZWYtODQ2OS05ZmJjZjY5YzIyMTUiLCJpc3MiOiJBRU1FVCIsImlhdCI6MTY2OTE4NjA4NywidXNlcklkIjoiMTI5YzVkM2EtY2VhZS00OWVmLTg0NjktOWZiY2Y2OWMyMjE1Iiwicm9sZSI6IiJ9.xtPVH8hEwLGRCmyL8Xccv7s2bNVB-wbVL7XSOP1VipM",
								"cache-control": "no-cache"
							},
							"url": "https://opendata.aemet.es/opendata/api/valores/climatologicos/inventarioestaciones/todasestaciones"
						}
					},
					{
						"name": "copia_observacion_diaria",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "peticion_url_estaciones",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "LOAD_DATE",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									{
										"name": "REC_SRC",
										"value": "API AEMET"
									}
								],
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AvroSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "AvroWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "scr_aemet",
								"type": "DatasetReference",
								"parameters": {
									"url_datos_aemet": {
										"value": "@activity('peticion_url_estaciones').output.datos",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Avro1",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "estaciones",
									"fichero": {
										"value": "@concat('estaciones_',utcNow('dd'),'.avro')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 Source to Data_Lake"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-13T11:29:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/scr_aemet')]",
				"[concat(variables('factoryId'), '/datasets/Avro1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1 AEMET OBSERVACION_HISTORICA_OLD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "peticion_url_obserbaciones",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"api_key": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyaWNhcmRvLmNhbWFjaG9Abm92YXF1YWxpdHkuZXMiLCJqdGkiOiIxMjljNWQzYS1jZWFlLTQ5ZWYtODQ2OS05ZmJjZjY5YzIyMTUiLCJpc3MiOiJBRU1FVCIsImlhdCI6MTY2OTE4NjA4NywidXNlcklkIjoiMTI5YzVkM2EtY2VhZS00OWVmLTg0NjktOWZiY2Y2OWMyMjE1Iiwicm9sZSI6IiJ9.xtPVH8hEwLGRCmyL8Xccv7s2bNVB-wbVL7XSOP1VipM",
								"cache-control": "no-cache"
							},
							"url": "https://opendata.aemet.es/opendata/api/valores/climatologicos/diarios/datos/fechaini/2023-03-01T00:00:00UTC/fechafin/2023-05-13T23:59:59UTC/todasestaciones"
						}
					},
					{
						"name": "copia_observacion_diaria",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "peticion_url_obserbaciones",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "LOAD_DATE",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									{
										"name": "REC_SRC",
										"value": "'https://opendata.aemet.es/opendata/api/observacion/convencional/todas'"
									}
								],
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "scr_aemet",
								"type": "DatasetReference",
								"parameters": {
									"url_datos_aemet": {
										"value": "@activity('peticion_url_obserbaciones').output.datos",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "STG",
									"tabla": "AEMET_OBSERVACION_ESTACION_DIA"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 Source to Data_Lake"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-11T08:12:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/scr_aemet')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1 AEMET OBSERVACION_HORARIA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "peticion_url_observaciones",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"api_key": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyaWNhcmRvLmNhbWFjaG9Abm92YXF1YWxpdHkuZXMiLCJqdGkiOiIxMjljNWQzYS1jZWFlLTQ5ZWYtODQ2OS05ZmJjZjY5YzIyMTUiLCJpc3MiOiJBRU1FVCIsImlhdCI6MTY2OTE4NjA4NywidXNlcklkIjoiMTI5YzVkM2EtY2VhZS00OWVmLTg0NjktOWZiY2Y2OWMyMjE1Iiwicm9sZSI6IiJ9.xtPVH8hEwLGRCmyL8Xccv7s2bNVB-wbVL7XSOP1VipM",
								"cache-control": "no-cache"
							},
							"url": "https://opendata.aemet.es/opendata/api/observacion/convencional/todas"
						}
					},
					{
						"name": "copia_observacion_diaria",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "peticion_url_observaciones",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "LOAD_DATE",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									{
										"name": "REC_SRC",
										"value": "'https://opendata.aemet.es/opendata/api/observacion/convencional/todas'"
									}
								],
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AvroSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "AvroWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "scr_aemet",
								"type": "DatasetReference",
								"parameters": {
									"url_datos_aemet": {
										"value": "@activity('peticion_url_observaciones').output.datos",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Avro1",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "observacion_diaria",
									"fichero": {
										"value": "@concat('observacion_diaria_',pipeline().TriggerTime)",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 Source to Data_Lake"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-14T16:52:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/scr_aemet')]",
				"[concat(variables('factoryId'), '/datasets/Avro1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1 AEMET PREDICCION_DIARIA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Descarga predicciones diarias",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "prediccionesAemet",
							"headers": {},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "AFAemet",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 Source to Data_Lake"
				},
				"annotations": [],
				"lastPublishTime": "2024-04-10T11:21:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AFAemet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 AEMET ESTACIONES_METEOROLOGICAS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copiar estaciones",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AvroSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF OBJECT_ID('STG.AEMET_ESTACIONES_METEOROLOGICAS') IS NOT NULL\nTRUNCATE TABLE STG.AEMET_ESTACIONES_METEOROLOGICAS;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"validateDataConsistency": true,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Avro1",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "estaciones",
									"fichero": {
										"value": "@concat('estaciones_',utcNow('dd'),'.avro')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "STG",
									"tabla": "AEMET_ESTACIONES_METEOROLOGICAS"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-13T11:29:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Avro1')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 AEMET OBSERVACION_DIARIA _old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copiar observaciones DL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AvroSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@adddays(pipeline().TriggerTime,-30)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"wildcardFolderPath": "observacion_diaria",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"validateDataConsistency": true,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Avro1",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "observacion_diaria",
									"fichero": "observacion_diaria"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "STG",
									"tabla": "AEMET_predicciones"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-28T15:38:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Avro1')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 AEMET OBSERVACION_HORARIA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Avro1",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "observacion_diaria",
									"fichero": "*"
								}
							},
							"fieldList": [
								"childItems",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@utcNow('yyyy-MM-dd 00:00:00')",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().type,'File')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Get Metadata2",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "Avro1",
														"type": "DatasetReference",
														"parameters": {
															"directorio": "observacion_diaria",
															"fichero": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"structure"
													],
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "copiar observaciones DL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Get Metadata2",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AvroSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "upsert",
														"upsertSettings": {
															"useTempDB": true,
															"keys": [
																"idema",
																"fint"
															]
														},
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"value": "@activity('Get Metadata1').output.childItems",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "Avro1",
														"type": "DatasetReference",
														"parameters": {
															"directorio": "observacion_diaria",
															"fichero": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DWH_open_data",
														"type": "DatasetReference",
														"parameters": {
															"esquema": "STG",
															"tabla": "AEMET_OBSERVACION_DIARIA"
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-24T10:51:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Avro1')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 AEMET PREDICCION_DIARIA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copiar observaciones DL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AvroSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"validateDataConsistency": true,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Avro1",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "prediccion_diaria",
									"fichero": {
										"value": "@activity('Get Metadata1').output.childItems[add(length(activity('Get Metadata1').output.childItems),-1)].name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "STG",
									"tabla": "AEMET_PREDICCIONES"
								}
							}
						]
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Avro1",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "prediccion_diaria",
									"fichero": "*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@utcNow('yyyy-MM-dd 00:00:00')",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-28T15:38:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Avro1')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 CARGA PADRON A STG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "padron_edad_sexo",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "REC_SRC",
										"value": "$$FILEPATH"
									},
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_comas",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "padron",
									"contenedor": "ine",
									"fichero": "df_padron_edad_sexo.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "stg",
									"tabla": "INE_PADRON_EDAD_SEXO"
								}
							}
						]
					},
					{
						"name": "padron_edad_pais_nacimiento",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "REC_SRC",
										"value": "$$FILEPATH"
									},
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_comas",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "padron",
									"contenedor": "ine",
									"fichero": "df_padron_edad_pais_nacimiento.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "stg",
									"tabla": "INE_PADRON_EDAD_PAIS_NACIMIENTO"
								}
							}
						]
					},
					{
						"name": "tasas_actividad",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "REC_SRC",
										"value": "$$FILEPATH"
									},
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_comas",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "actividad_economica",
									"contenedor": "ine",
									"fichero": "tasas_actividad.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "stg",
									"tabla": "INE_TASA_ACTIVIDAD"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-30T14:29:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_comas')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 COPIA DIAS_FESTIVOS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "COPIA_DIAS_FESTIVOS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "APK2DB",
								"type": "DatasetReference",
								"parameters": {
									"ESQUEMA": "STG",
									"TABLA": "DIAS_FESTIVOS"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "STG",
									"tabla": "DIAS_FESTIVOS"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-29T17:11:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/APK2DB')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 Carga datos Sanidad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "carga Direcciones",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'direcciones' AND type = 'U')\n\tBEGIN\n    \tdrop TABLE staging.direcciones;\n\tEND",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_comas_copy1",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "maestros",
									"contenedor": "salud",
									"fichero": "direcciones_completo.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "direcciones"
								}
							}
						]
					},
					{
						"name": "medicos",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "carga Direcciones",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'medicos' AND type = 'U')\nBEGIN\n    drop TABLE staging.medicos;\nEND\n",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_comas_copy1",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "maestros",
									"contenedor": "salud",
									"fichero": "maestro_medicos.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "medicos"
								}
							}
						]
					},
					{
						"name": "centros",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "medicos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'centros' AND type = 'U')\nBEGIN\n    drop TABLE staging.centros;\nEND\n",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_comas_copy1",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "maestros",
									"contenedor": "salud",
									"fichero": "maestro_centros.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "centros"
								}
							}
						]
					},
					{
						"name": "hospitales",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "centros",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'hospitales' AND type = 'U')\nBEGIN\n    drop TABLE staging.hospitales;\nEND\n",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_comas_copy1",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "maestros",
									"contenedor": "salud",
									"fichero": "maestro_hospitales.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "hospitales"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-13T17:47:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_comas_copy1')]",
				"[concat(variables('factoryId'), '/datasets/farma')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 Carga datos pois')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "carga pois",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'df_pois_g' AND type = 'U')\n\tBEGIN\n    \tdrop TABLE staging.df_pois_g;\n\tEND",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_comas_copy1",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "maestros",
									"contenedor": "salud",
									"fichero": "df_pois_g.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "df_pois_g",
									"bbdd": "farma"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-17T19:34:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_comas_copy1')]",
				"[concat(variables('factoryId'), '/datasets/farma')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 INE DATOS_ESTADISTICA_ESPERIMENTAL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lee_directorios_archivos",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "archivo_texto_Data_Lake",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "CATALOGO",
									"contenedor": "ine",
									"fichero": "DIRECTORIO_DATOS_INE.csv"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lee_directorios_archivos",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lee_directorios_archivos').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "copiar oficheros_ine",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "REC_SRC",
													"value": "$$FILEPATH"
												},
												{
													"name": "LOAD_DTS",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "IF EXISTS (SELECT * FROM sys.tables WHERE name = '@{item().table_name}' AND type = 'U')\nBEGIN\n    \tdrop TABLE STG.@{item().table_name};\n\tEND",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"validateDataConsistency": true,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "archivo_texto_Data_Lake_tab",
											"type": "DatasetReference",
											"parameters": {
												"directorio": {
													"value": "@item().Directorio",
													"type": "Expression"
												},
												"contenedor": "ine",
												"fichero": {
													"value": "@item().fichero_ultimo\r\n",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DWH_open_data",
											"type": "DatasetReference",
											"parameters": {
												"esquema": "STG",
												"tabla": {
													"value": "@item().table_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-24T17:04:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_Lake')]",
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_Lake_tab')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 Rutas Sanitarias')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Rutas",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "maestros/rutas",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'rutas' AND type = 'U')\nBEGIN\n    \tdrop TABLE staging.rutas;\n\tEND",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_Lake_tab",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "1",
									"contenedor": "salud",
									"fichero": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "rutas",
									"bbdd": "farma"
								}
							}
						]
					},
					{
						"name": "RUTAS_FARMACIAS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Rutas",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": "SELECT R.tipo_via , r.via , r.tramo , r.codigo_postal ,r.tipo_ruta, r.importancia , r.medio  ,r.sentido_transito , SS.[Número Vía] num_via_farma, SS.hash_direccion hash_direccion_farma\nFROM farma.staging.rutas R\nleft  JOIN (select D.[Código Tipo Vía] , D.[Nombre de la vía] , D.[Número Vía] , D.[Código Postal]  , D.hash_direccion\nfrom staging.centros c \nLEFT JOIN staging.direcciones d ON D.hash_direccion = C.hash_direccion \nwhere c.[Tipo centro] = 'E1 - Oficinas de farmacia' ) SS ON SS.[Código Postal]  = R.codigo_postal\nAND SS.[Nombre de la vía] = R.via \nAND SS.[Código Tipo Vía]= R.tipo_via\nwhere  r.via is not null ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'rutas_farmacias' AND type = 'U')\nBEGIN\n    \tdrop TABLE staging.rutas_farmacias;\n\tEND",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1",
									"bbdd": "farma"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "rutas_farmacias",
									"bbdd": "farma"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-12T16:05:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_Lake_tab')]",
				"[concat(variables('factoryId'), '/datasets/farma')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 Zonas_influencia FARMAS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy catastro",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "maestros/zonas_influencias/catastro",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'ZI_catastro' AND type = 'U')\nBEGIN\n    \tdrop TABLE staging.ZI_catastro;\n\tEND",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_Lake_tab",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "1",
									"contenedor": "salud",
									"fichero": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "ZI_catastro"
								}
							}
						]
					},
					{
						"name": "Copy medicos",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy catastro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "maestros/zonas_influencias/centros_medicos",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'ZI_centros_medicos' AND type = 'U')\nBEGIN\n    \tdrop TABLE staging.ZI_centros_medicos;\n\tEND",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_Lake_tab",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "1",
									"contenedor": "salud",
									"fichero": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "ZI_centros_medicos"
								}
							}
						]
					},
					{
						"name": "Copy Hospitales",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy medicos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "maestros/zonas_influencias/hospitales",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'ZI_hospitales' AND type = 'U')\nBEGIN\n    \tdrop TABLE staging.ZI_hospitales;\n\tEND",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_Lake_tab",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "1",
									"contenedor": "salud",
									"fichero": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "ZI_hospitales"
								}
							}
						]
					},
					{
						"name": "Copy Pois",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Hospitales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "maestros/zonas_influencias/pois",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'ZI_pois' AND type = 'U')\nBEGIN\n    \tdrop TABLE staging.ZI_pois;\n\tEND",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_Lake_tab",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "1",
									"contenedor": "salud",
									"fichero": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "ZI_pois"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-24T16:11:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_Lake_tab')]",
				"[concat(variables('factoryId'), '/datasets/farma')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 Zonas_influencia FARMAS_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy poligonos",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "maestros/zonas_influencias/poligonos",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'farmacias_poligono' AND type = 'U')\nBEGIN\n    \tdrop TABLE staging.farmacias_poligono;\n\tEND",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_Lake_tab",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "1",
									"contenedor": "salud",
									"fichero": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "farmacias_poligono"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-14T13:59:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_Lake_tab')]",
				"[concat(variables('factoryId'), '/datasets/farma')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 carga catastro')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copia catastro_agregado_fincas_seccion",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "geol_loc",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "geo_area",
									"tabla": "tb_catastro_portales"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "STG",
									"tabla": "tb_catastro_portales"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-22T11:05:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/geol_loc')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 carga catastro_v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copia catastro_agregado_portales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'tb_catastro_portales_espejo' AND type = 'U')\nBEGIN\n    \tdrop TABLE STG.tb_catastro_portales_espejo;\n\tEND",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText_comas",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "STG",
									"tabla": "tb_catastro_portales_espejo"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-14T13:59:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText_comas')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2 copia maestro_farmacias_excel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copia maestro_farmacias_excel",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "backupfarmades",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "archivos_parquet",
								"type": "DatasetReference",
								"parameters": {
									"contenedor": "salud",
									"directorio": "maestros/maestros_farmacias"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/backupfarmades')]",
				"[concat(variables('factoryId'), '/datasets/archivos_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3 DATOS CATASTRO FINCAS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HUB_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nMunicipios_KEY, Cod_Municipio, max(LOAD_DTS) LOAD_DTS , max(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nwhere not exists( select 1 from open_data.INE.HUB_MUNICIPIOS h where h.Municipios_KEY= o.Municipios_KEY)\ngroup by Municipios_KEY, Cod_Municipio;\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_MUNICIPIOS"
								}
							}
						]
					},
					{
						"name": "HUB_DISTRITOS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nDistritos_KEY, \nCod_Distritos , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( \n  SELECT 1 \n  FROM open_data.INE.HUB_DISTRITOS h \n  WHERE h.Distritos_KEY = o.Distritos_KEY\n) and Cod_Distritos is not null\nGROUP BY Distritos_KEY, \nCod_Distritos;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_DISTRITOS"
								}
							}
						]
					},
					{
						"name": "SAT_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_MUNICIPIO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSELECT \nMunicipios_KEY, Municipios , max(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, max(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nwhere not exists( select 1 from open_data.INE.SAT_MUNICIPIOS h where h.Municipios_KEY= o.Municipios_KEY)\ngroup by Municipios_KEY, Municipios;\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_MUNICIPIOS"
								}
							}
						]
					},
					{
						"name": "SAT_DISTRITOS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_DISTRITOS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nDistritos_KEY, \nDistritos , \nMAX(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, \nMAX(REC_SRC) REC_SRC  \n--INTO  INE.SAT_DISTRITOS\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS(   SELECT 1   FROM open_data.INE.SAT_DISTRITOS h   WHERE h.Distritos_KEY = o.Distritos_KEY AND START_DTS = O.LOAD_DTS ) and\nCod_Distritos is not null\nGROUP BY Distritos_KEY, \nDistritos;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_DISTRITOS"
								}
							}
						]
					},
					{
						"name": "HUB_SECCIONES",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nSecciones_KEY, \nCod_Secciones, \nMAX(LOAD_DTS) LOAD_DTS, \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( \n  SELECT 1 \n  FROM open_data.INE.HUB_SECCIONES h \n  WHERE h.Secciones_KEY = o.Secciones_KEY\n) \nAND Secciones IS NOT NULL\nGROUP BY Secciones_KEY, Cod_Secciones;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_SECCIONES"
								}
							}
						]
					},
					{
						"name": "SAT_SECCIONES",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_SECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nSecciones_KEY, \nSecciones, \nMAX(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, \nMAX(REC_SRC) REC_SRC  \n--INTO INE.SAT_SECCIONES\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.SAT_SECCIONES h  WHERE h.Secciones_KEY = o.Secciones_KEY AND START_DTS = O.LOAD_DTS) AND\nSecciones IS NOT NULL\nGROUP BY Secciones_KEY, Secciones;\n\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_SECCIONES"
								}
							}
						]
					},
					{
						"name": "LINK_SECCION_DISTRITO_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SAT_SECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SAT_DISTRITOS",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SAT_MUNICIPIO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSELECT \nMAX(CONVERT(nvarchar(32),(HASHBYTES('SHA2_256',concat(LTRIM(RTRIM(\"Municipios\")),LTRIM(RTRIM(\"Distritos\")),LTRIM(RTRIM(\"Secciones\")) ))),2)) as \"LINK_SECC_DIST_MUNIKEY\",\nMunicipios_KEY, Distritos_KEY, Secciones_KEY,\nMAX(LOAD_DTS) LOAD_DTS , MAX(REC_SRC) REC_SRC \n--INTO INE.LINK_SECCION_DISTRITO_MUNICIPIO\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( SELECT 1 FROM INE.LINK_SECCION_DISTRITO_MUNICIPIO WHERE LINK_SECC_DIST_MUNIKEY=CONVERT(nvarchar(32),(HASHBYTES('SHA2_256',concat(LTRIM(RTRIM(\"Municipios\")),LTRIM(RTRIM(\"Distritos\")),LTRIM(RTRIM(\"Secciones\")) ))),2))\nGROUP BY Municipios_KEY, Distritos_KEY, Secciones_KEY;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_SECCION_DISTRITO_MUNICIPIO"
								}
							}
						]
					},
					{
						"name": "HUB_METRICAS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nmetrica_KEY , \nmetrica , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.HUB_METRICA h  WHERE h.metrica_KEY = o.metrica_KEY ) AND\nmetrica  IS NOT NULL\nGROUP BY metrica_KEY ,metrica;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_METRICA"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_SECCION_DISTRITO_MUNICIPIO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "HUB_METRICAS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY,\nSecciones_KEY ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_SECCION_METRICA_ANNO WHERE LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY=LINK_KEY) and\nSecciones is not null ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY,\nDistritos_KEY  ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  is not null AND Secciones IS NULL ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO_KEY,\nMunicipios_KEY  ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  IS NULL ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ORIGEN": {
						"type": "string",
						"defaultValue": "INE_DEMOGRAFICOS_HD"
					}
				},
				"folder": {
					"name": "3 STG TO DWH"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-22T18:08:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3 DATOS INE_DEMOGRAFICOS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HUB_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nMunicipios_KEY, Cod_Municipio, max(LOAD_DTS) LOAD_DTS , max(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nwhere not exists( select 1 from open_data.INE.HUB_MUNICIPIOS h where h.Municipios_KEY= o.Municipios_KEY)\ngroup by Municipios_KEY, Cod_Municipio;\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_MUNICIPIOS"
								}
							}
						]
					},
					{
						"name": "HUB_DISTRITOS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nDistritos_KEY, \nCod_Distritos , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( \n  SELECT 1 \n  FROM open_data.INE.HUB_DISTRITOS h \n  WHERE h.Distritos_KEY = o.Distritos_KEY\n) and Cod_Distritos is not null\nGROUP BY Distritos_KEY, \nCod_Distritos;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_DISTRITOS"
								}
							}
						]
					},
					{
						"name": "SAT_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_MUNICIPIO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSELECT \nMunicipios_KEY, Municipios , max(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, max(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nwhere not exists( select 1 from open_data.INE.SAT_MUNICIPIOS h where h.Municipios_KEY= o.Municipios_KEY)\ngroup by Municipios_KEY, Municipios;\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_MUNICIPIOS"
								}
							}
						]
					},
					{
						"name": "SAT_DISTRITOS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_DISTRITOS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nDistritos_KEY, \nDistritos , \nMAX(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, \nMAX(REC_SRC) REC_SRC  \n--INTO  INE.SAT_DISTRITOS\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS(   SELECT 1   FROM open_data.INE.SAT_DISTRITOS h   WHERE h.Distritos_KEY = o.Distritos_KEY AND START_DTS = O.LOAD_DTS ) and\nCod_Distritos is not null\nGROUP BY Distritos_KEY, \nDistritos;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_DISTRITOS"
								}
							}
						]
					},
					{
						"name": "HUB_SECCIONES",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nSecciones_KEY, \nCod_Secciones, \nMAX(LOAD_DTS) LOAD_DTS, \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( \n  SELECT 1 \n  FROM open_data.INE.HUB_SECCIONES h \n  WHERE h.Secciones_KEY = o.Secciones_KEY\n) \nAND Secciones IS NOT NULL\nGROUP BY Secciones_KEY, Cod_Secciones;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_SECCIONES"
								}
							}
						]
					},
					{
						"name": "SAT_SECCIONES",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_SECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nSecciones_KEY, \nSecciones, \nMAX(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, \nMAX(REC_SRC) REC_SRC  \n--INTO INE.SAT_SECCIONES\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.SAT_SECCIONES h  WHERE h.Secciones_KEY = o.Secciones_KEY AND START_DTS = O.LOAD_DTS) AND\nSecciones IS NOT NULL\nGROUP BY Secciones_KEY, Secciones;\n\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_SECCIONES"
								}
							}
						]
					},
					{
						"name": "LINK_SECCION_DISTRITO_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SAT_SECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SAT_DISTRITOS",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SAT_MUNICIPIO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSELECT \nMAX(CONVERT(nvarchar(32),(HASHBYTES('SHA2_256',concat(LTRIM(RTRIM(\"Municipios\")),LTRIM(RTRIM(\"Distritos\")),LTRIM(RTRIM(\"Secciones\")) ))),2)) as \"LINK_SECC_DIST_MUNIKEY\",\nMunicipios_KEY, Distritos_KEY, Secciones_KEY,\nMAX(LOAD_DTS) LOAD_DTS , MAX(REC_SRC) REC_SRC \n--INTO INE.LINK_SECCION_DISTRITO_MUNICIPIO\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( SELECT 1 FROM INE.LINK_SECCION_DISTRITO_MUNICIPIO WHERE LINK_SECC_DIST_MUNIKEY=CONVERT(nvarchar(32),(HASHBYTES('SHA2_256',concat(LTRIM(RTRIM(\"Municipios\")),LTRIM(RTRIM(\"Distritos\")),LTRIM(RTRIM(\"Secciones\")) ))),2))\nGROUP BY Municipios_KEY, Distritos_KEY, Secciones_KEY;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_SECCION_DISTRITO_MUNICIPIO"
								}
							}
						]
					},
					{
						"name": "HUB_METRICAS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nmetrica_KEY , \nmetrica , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.HUB_METRICA h  WHERE h.metrica_KEY = o.metrica_KEY ) AND\nmetrica  IS NOT NULL\nGROUP BY metrica_KEY ,metrica;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_METRICA"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_SECCION_DISTRITO_MUNICIPIO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "HUB_METRICAS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY,\nSecciones_KEY ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_SECCION_METRICA_ANNO WHERE LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY=LINK_KEY) and\nSecciones is not null ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY,\nDistritos_KEY  ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  is not null AND Secciones IS NULL ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO_KEY,\nMunicipios_KEY  ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  IS NULL ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ORIGEN": {
						"type": "string",
						"defaultValue": "INE_DEMOGRAFICOS_HD"
					}
				},
				"folder": {
					"name": "3 STG TO DWH"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-06T18:01:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3 DATOS INE_FUENTES_RENTA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HUB_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nMunicipios_KEY, Cod_Municipio, max(LOAD_DTS) LOAD_DTS , max(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nwhere not exists( select 1 from open_data.INE.HUB_MUNICIPIOS h where h.Municipios_KEY= o.Municipios_KEY)\ngroup by Municipios_KEY, Cod_Municipio;\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_MUNICIPIOS"
								}
							}
						]
					},
					{
						"name": "HUB_DISTRITOS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nDistritos_KEY, \nCod_Distritos , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( \n  SELECT 1 \n  FROM open_data.INE.HUB_DISTRITOS h \n  WHERE h.Distritos_KEY = o.Distritos_KEY\n) and Cod_Distritos is not null\nGROUP BY Distritos_KEY, \nCod_Distritos;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_DISTRITOS"
								}
							}
						]
					},
					{
						"name": "SAT_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_MUNICIPIO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSELECT \nMunicipios_KEY, Municipios , max(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, max(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nwhere not exists( select 1 from open_data.INE.SAT_MUNICIPIOS h where h.Municipios_KEY= o.Municipios_KEY)\ngroup by Municipios_KEY, Municipios;\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_MUNICIPIOS"
								}
							}
						]
					},
					{
						"name": "SAT_DISTRITOS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_DISTRITOS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nDistritos_KEY, \nDistritos , \nMAX(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, \nMAX(REC_SRC) REC_SRC  \n--INTO  INE.SAT_DISTRITOS\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS(   SELECT 1   FROM open_data.INE.SAT_DISTRITOS h   WHERE h.Distritos_KEY = o.Distritos_KEY AND START_DTS = O.LOAD_DTS ) and\nCod_Distritos is not null\nGROUP BY Distritos_KEY, \nDistritos;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_DISTRITOS"
								}
							}
						]
					},
					{
						"name": "HUB_SECCIONES",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nSecciones_KEY, \nCod_Secciones, \nMAX(LOAD_DTS) LOAD_DTS, \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( \n  SELECT 1 \n  FROM open_data.INE.HUB_SECCIONES h \n  WHERE h.Secciones_KEY = o.Secciones_KEY\n) \nAND Secciones IS NOT NULL\nGROUP BY Secciones_KEY, Cod_Secciones;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_SECCIONES"
								}
							}
						]
					},
					{
						"name": "SAT_SECCIONES",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_SECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nSecciones_KEY, \nSecciones, \nMAX(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, \nMAX(REC_SRC) REC_SRC  \n--INTO INE.SAT_SECCIONES\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.SAT_SECCIONES h  WHERE h.Secciones_KEY = o.Secciones_KEY AND START_DTS = O.LOAD_DTS) AND\nSecciones IS NOT NULL\nGROUP BY Secciones_KEY, Secciones;\n\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_SECCIONES"
								}
							}
						]
					},
					{
						"name": "LINK_SECCION_DISTRITO_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SAT_SECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SAT_DISTRITOS",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SAT_MUNICIPIO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSELECT \nMAX(CONVERT(nvarchar(32),(HASHBYTES('SHA2_256',concat(LTRIM(RTRIM(\"Municipios\")),LTRIM(RTRIM(\"Distritos\")),LTRIM(RTRIM(\"Secciones\")) ))),2)) as \"LINK_SECC_DIST_MUNIKEY\",\nMunicipios_KEY, Distritos_KEY, Secciones_KEY,\nMAX(LOAD_DTS) LOAD_DTS , MAX(REC_SRC) REC_SRC \n--INTO INE.LINK_SECCION_DISTRITO_MUNICIPIO\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( SELECT 1 FROM INE.LINK_SECCION_DISTRITO_MUNICIPIO WHERE LINK_SECC_DIST_MUNIKEY=CONVERT(nvarchar(32),(HASHBYTES('SHA2_256',concat(LTRIM(RTRIM(\"Municipios\")),LTRIM(RTRIM(\"Distritos\")),LTRIM(RTRIM(\"Secciones\")) ))),2))\nGROUP BY Municipios_KEY, Distritos_KEY, Secciones_KEY;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_SECCION_DISTRITO_MUNICIPIO"
								}
							}
						]
					},
					{
						"name": "HUB_METRICAS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nmetrica_KEY , \nmetrica , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.HUB_METRICA h  WHERE h.metrica_KEY = o.metrica_KEY ) AND\nmetrica  IS NOT NULL\nGROUP BY metrica_KEY ,metrica;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_METRICA"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_SECCION_DISTRITO_MUNICIPIO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "HUB_METRICAS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY,\nSecciones_KEY ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_SECCION_METRICA_ANNO WHERE LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY=LINK_KEY) and\nSecciones is not null ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY,\nDistritos_KEY  ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  is not null AND Secciones IS NULL ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO_KEY,\nMunicipios_KEY  ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  IS NULL ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ORIGEN": {
						"type": "string",
						"defaultValue": "INE_FUENTE_INGRESOS_HD"
					}
				},
				"folder": {
					"name": "3 STG TO DWH"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-06T18:00:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3 DATOS INE_PADRON_EDAD_SEXO')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HUB_METRICAS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nmetrica_KEY , \nmetrica , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.HUB_METRICA h  WHERE h.metrica_KEY = o.metrica_KEY ) AND\nmetrica  IS NOT NULL\nGROUP BY metrica_KEY ,metrica;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_METRICA"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_METRICAS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY,\nSecciones_KEY ,\n metrica_KEY, \n anno,\n cast(valor as float) valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_SECCION_METRICA_ANNO WHERE LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY=LINK_KEY) ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "HUB_METRICAS_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nmetrica_KEY , \nmetrica , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN_2} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.HUB_METRICA h  WHERE h.metrica_KEY = o.metrica_KEY ) AND\nmetrica  IS NOT NULL\nGROUP BY metrica_KEY ,metrica;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_METRICA"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_METRICAS_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY,\nSecciones_KEY ,\n metrica_KEY, \n anno,\n cast(valor as float) valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN_2} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_SECCION_METRICA_ANNO WHERE LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY=LINK_KEY) ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ORIGEN": {
						"type": "string",
						"defaultValue": "INE_PADRON_EDAD_SEXO_HD"
					},
					"ORIGEN_2": {
						"type": "string",
						"defaultValue": "INE_PADRON_EDAD_PAIS_NACIMIENTO_HD"
					}
				},
				"folder": {
					"name": "3 STG TO DWH"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-24T17:42:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3 DATOS INE_RENTAS_MEDIAS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HUB_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nMunicipios_KEY, Cod_Municipio, max(LOAD_DTS) LOAD_DTS , max(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nwhere not exists( select 1 from open_data.INE.HUB_MUNICIPIOS h where h.Municipios_KEY= o.Municipios_KEY)\ngroup by Municipios_KEY, Cod_Municipio;\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_MUNICIPIOS"
								}
							}
						]
					},
					{
						"name": "HUB_DISTRITOS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nDistritos_KEY, \nCod_Distritos , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( \n  SELECT 1 \n  FROM open_data.INE.HUB_DISTRITOS h \n  WHERE h.Distritos_KEY = o.Distritos_KEY\n) and Cod_Distritos is not null\nGROUP BY Distritos_KEY, \nCod_Distritos;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_DISTRITOS"
								}
							}
						]
					},
					{
						"name": "SAT_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_MUNICIPIO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSELECT \nMunicipios_KEY, Municipios , max(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, max(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nwhere not exists( select 1 from open_data.INE.SAT_MUNICIPIOS h where h.Municipios_KEY= o.Municipios_KEY)\ngroup by Municipios_KEY, Municipios;\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_MUNICIPIOS"
								}
							}
						]
					},
					{
						"name": "SAT_DISTRITOS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_DISTRITOS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nDistritos_KEY, \nDistritos , \nMAX(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, \nMAX(REC_SRC) REC_SRC  \n--INTO  INE.SAT_DISTRITOS\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS(   SELECT 1   FROM open_data.INE.SAT_DISTRITOS h   WHERE h.Distritos_KEY = o.Distritos_KEY AND START_DTS = O.LOAD_DTS ) and\nCod_Distritos is not null\nGROUP BY Distritos_KEY, \nDistritos;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_DISTRITOS"
								}
							}
						]
					},
					{
						"name": "HUB_SECCIONES",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nSecciones_KEY, \nCod_Secciones, \nMAX(LOAD_DTS) LOAD_DTS, \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( \n  SELECT 1 \n  FROM open_data.INE.HUB_SECCIONES h \n  WHERE h.Secciones_KEY = o.Secciones_KEY\n) \nAND Secciones IS NOT NULL\nGROUP BY Secciones_KEY, Cod_Secciones;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_SECCIONES"
								}
							}
						]
					},
					{
						"name": "SAT_SECCIONES",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_SECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nSecciones_KEY, \nSecciones, \nMAX(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, \nMAX(REC_SRC) REC_SRC  \n--INTO INE.SAT_SECCIONES\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.SAT_SECCIONES h  WHERE h.Secciones_KEY = o.Secciones_KEY AND START_DTS = O.LOAD_DTS) AND\nSecciones IS NOT NULL\nGROUP BY Secciones_KEY, Secciones;\n\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_SECCIONES"
								}
							}
						]
					},
					{
						"name": "LINK_SECCION_DISTRITO_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SAT_SECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SAT_DISTRITOS",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SAT_MUNICIPIO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSELECT \nMAX(CONVERT(nvarchar(32),(HASHBYTES('SHA2_256',concat(LTRIM(RTRIM(\"Municipios\")),LTRIM(RTRIM(\"Distritos\")),LTRIM(RTRIM(\"Secciones\")) ))),2)) as \"LINK_SECC_DIST_MUNIKEY\",\nMunicipios_KEY, Distritos_KEY, Secciones_KEY,\nMAX(LOAD_DTS) LOAD_DTS , MAX(REC_SRC) REC_SRC \n--INTO INE.LINK_SECCION_DISTRITO_MUNICIPIO\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( SELECT 1 FROM INE.LINK_SECCION_DISTRITO_MUNICIPIO WHERE LINK_SECC_DIST_MUNIKEY=CONVERT(nvarchar(32),(HASHBYTES('SHA2_256',concat(LTRIM(RTRIM(\"Municipios\")),LTRIM(RTRIM(\"Distritos\")),LTRIM(RTRIM(\"Secciones\")) ))),2))\nGROUP BY Municipios_KEY, Distritos_KEY, Secciones_KEY;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_SECCION_DISTRITO_MUNICIPIO"
								}
							}
						]
					},
					{
						"name": "HUB_METRICAS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nmetrica_KEY , \nmetrica , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.HUB_METRICA h  WHERE h.metrica_KEY = o.metrica_KEY ) AND\nmetrica  IS NOT NULL\nGROUP BY metrica_KEY ,metrica;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_METRICA"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_SECCION_DISTRITO_MUNICIPIO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "HUB_METRICAS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY,\nSecciones_KEY ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_SECCION_METRICA_ANNO WHERE LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY=LINK_KEY) and\nSecciones is not null ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY,\nDistritos_KEY  ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  is not null AND Secciones IS NULL ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO_KEY,\nMunicipios_KEY  ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  IS NULL ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ORIGEN": {
						"type": "string",
						"defaultValue": "INE_RENTAS_MEDIAS_HD"
					}
				},
				"folder": {
					"name": "3 STG TO DWH"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-06T18:00:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3 DATOS INE_UMBRALES_MAX_MIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HUB_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nMunicipios_KEY, Cod_Municipio, max(LOAD_DTS) LOAD_DTS , max(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nwhere not exists( select 1 from open_data.INE.HUB_MUNICIPIOS h where h.Municipios_KEY= o.Municipios_KEY)\ngroup by Municipios_KEY, Cod_Municipio;\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_MUNICIPIOS"
								}
							}
						]
					},
					{
						"name": "HUB_DISTRITOS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nDistritos_KEY, \nCod_Distritos , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( \n  SELECT 1 \n  FROM open_data.INE.HUB_DISTRITOS h \n  WHERE h.Distritos_KEY = o.Distritos_KEY\n) and Cod_Distritos is not null\nGROUP BY Distritos_KEY, \nCod_Distritos;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_DISTRITOS"
								}
							}
						]
					},
					{
						"name": "SAT_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_MUNICIPIO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSELECT \nMunicipios_KEY, Municipios , max(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, max(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nwhere not exists( select 1 from open_data.INE.SAT_MUNICIPIOS h where h.Municipios_KEY= o.Municipios_KEY)\ngroup by Municipios_KEY, Municipios;\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_MUNICIPIOS"
								}
							}
						]
					},
					{
						"name": "SAT_DISTRITOS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_DISTRITOS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nDistritos_KEY, \nDistritos , \nMAX(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, \nMAX(REC_SRC) REC_SRC  \n--INTO  INE.SAT_DISTRITOS\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS(   SELECT 1   FROM open_data.INE.SAT_DISTRITOS h   WHERE h.Distritos_KEY = o.Distritos_KEY AND START_DTS = O.LOAD_DTS ) and\nCod_Distritos is not null\nGROUP BY Distritos_KEY, \nDistritos;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_DISTRITOS"
								}
							}
						]
					},
					{
						"name": "HUB_SECCIONES",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nSecciones_KEY, \nCod_Secciones, \nMAX(LOAD_DTS) LOAD_DTS, \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( \n  SELECT 1 \n  FROM open_data.INE.HUB_SECCIONES h \n  WHERE h.Secciones_KEY = o.Secciones_KEY\n) \nAND Secciones IS NOT NULL\nGROUP BY Secciones_KEY, Cod_Secciones;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_SECCIONES"
								}
							}
						]
					},
					{
						"name": "SAT_SECCIONES",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_SECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nSecciones_KEY, \nSecciones, \nMAX(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, \nMAX(REC_SRC) REC_SRC  \n--INTO INE.SAT_SECCIONES\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.SAT_SECCIONES h  WHERE h.Secciones_KEY = o.Secciones_KEY AND START_DTS = O.LOAD_DTS) AND\nSecciones IS NOT NULL\nGROUP BY Secciones_KEY, Secciones;\n\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_SECCIONES"
								}
							}
						]
					},
					{
						"name": "LINK_SECCION_DISTRITO_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SAT_SECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SAT_DISTRITOS",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SAT_MUNICIPIO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSELECT \nMAX(CONVERT(nvarchar(32),(HASHBYTES('SHA2_256',concat(LTRIM(RTRIM(\"Municipios\")),LTRIM(RTRIM(\"Distritos\")),LTRIM(RTRIM(\"Secciones\")) ))),2)) as \"LINK_SECC_DIST_MUNIKEY\",\nMunicipios_KEY, Distritos_KEY, Secciones_KEY,\nMAX(LOAD_DTS) LOAD_DTS , MAX(REC_SRC) REC_SRC \n--INTO INE.LINK_SECCION_DISTRITO_MUNICIPIO\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( SELECT 1 FROM INE.LINK_SECCION_DISTRITO_MUNICIPIO WHERE LINK_SECC_DIST_MUNIKEY=CONVERT(nvarchar(32),(HASHBYTES('SHA2_256',concat(LTRIM(RTRIM(\"Municipios\")),LTRIM(RTRIM(\"Distritos\")),LTRIM(RTRIM(\"Secciones\")) ))),2))\nGROUP BY Municipios_KEY, Distritos_KEY, Secciones_KEY;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_SECCION_DISTRITO_MUNICIPIO"
								}
							}
						]
					},
					{
						"name": "HUB_METRICAS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nmetrica_KEY , \nmetrica , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.HUB_METRICA h  WHERE h.metrica_KEY = o.metrica_KEY ) AND\nmetrica  IS NOT NULL\nGROUP BY metrica_KEY ,metrica;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_METRICA"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_SECCION_DISTRITO_MUNICIPIO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "HUB_METRICAS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY,\nSecciones_KEY ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_SECCION_METRICA_ANNO WHERE LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY=LINK_KEY) and\nSecciones is not null \nAND Sexo = 'Total';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY,\nDistritos_KEY  ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  is not null AND Secciones IS NULL \nAND Sexo = 'Total' ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO_KEY,\nMunicipios_KEY  ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  IS NULL AND Sexo = 'Total';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_SECCION_GENERO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_SECCION_GENERO_METRICA_ANNO_KEY,\nSecciones_KEY ,\n metrica_KEY, \n anno,\n Sexo,\n valor_metrica, \nLOAD_DTS, REC_SRC\n--INTO open_data.INE.LINK_DATOS_NIVEL_SECCION_GENERO_METRICA_ANNO\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_SECCION_GENERO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_SECCION_GENERO_METRICA_ANNO_KEY=LINK_KEY) and\nSecciones is not null \n;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_SECCION_GENERO_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_DISTRITO_GENERO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_DISTRITO_GENERO_METRICA_ANNO_KEY,\nDistritos_KEY  ,\n metrica_KEY, \n Sexo,\n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_DISTRITO_GENERO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_DISTRITO_GENERO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  is not null AND Secciones IS NULL \nAND Sexo = 'Total' ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_DISTRITO_GENERO_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_MUNICIPIO_GENERO_METRICA_ANNO_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_MUNICIPIO_METRICA_GENERO_ANNO_KEY,\nMunicipios_KEY  ,\n metrica_KEY, \n Sexo,\n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\n--INTO INE.LINK_DATOS_NIVEL_MUNICIPIO_METRICA_GENERO_ANNO\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_MUNICIPIO_METRICA_GENERO_ANNO WHERE LINK_DATOS_NIVEL_MUNICIPIO_METRICA_GENERO_ANNO_KEY=LINK_KEY) and\nDistritos  IS NULL;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_GENERO_ANNO"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ORIGEN": {
						"type": "string",
						"defaultValue": "INE_UMBRALES_MIN_MAX_GENERO_HD"
					}
				},
				"folder": {
					"name": "3 STG TO DWH"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-08T18:31:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3 DATOS INE_UMBRALES_RENTA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HUB_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nMunicipios_KEY, Cod_Municipio, max(LOAD_DTS) LOAD_DTS , max(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nwhere not exists( select 1 from open_data.INE.HUB_MUNICIPIOS h where h.Municipios_KEY= o.Municipios_KEY)\ngroup by Municipios_KEY, Cod_Municipio;\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_MUNICIPIOS"
								}
							}
						]
					},
					{
						"name": "HUB_DISTRITOS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nDistritos_KEY, \nCod_Distritos , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( \n  SELECT 1 \n  FROM open_data.INE.HUB_DISTRITOS h \n  WHERE h.Distritos_KEY = o.Distritos_KEY\n) and Cod_Distritos is not null\nGROUP BY Distritos_KEY, \nCod_Distritos;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_DISTRITOS"
								}
							}
						]
					},
					{
						"name": "SAT_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_MUNICIPIO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSELECT \nMunicipios_KEY, Municipios , max(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, max(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nwhere not exists( select 1 from open_data.INE.SAT_MUNICIPIOS h where h.Municipios_KEY= o.Municipios_KEY)\ngroup by Municipios_KEY, Municipios;\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_MUNICIPIOS"
								}
							}
						]
					},
					{
						"name": "SAT_DISTRITOS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_DISTRITOS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nDistritos_KEY, \nDistritos , \nMAX(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, \nMAX(REC_SRC) REC_SRC  \n--INTO  INE.SAT_DISTRITOS\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS(   SELECT 1   FROM open_data.INE.SAT_DISTRITOS h   WHERE h.Distritos_KEY = o.Distritos_KEY AND START_DTS = O.LOAD_DTS ) and\nCod_Distritos is not null\nGROUP BY Distritos_KEY, \nDistritos;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_DISTRITOS"
								}
							}
						]
					},
					{
						"name": "HUB_SECCIONES",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nSecciones_KEY, \nCod_Secciones, \nMAX(LOAD_DTS) LOAD_DTS, \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( \n  SELECT 1 \n  FROM open_data.INE.HUB_SECCIONES h \n  WHERE h.Secciones_KEY = o.Secciones_KEY\n) \nAND Secciones IS NOT NULL\nGROUP BY Secciones_KEY, Cod_Secciones;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_SECCIONES"
								}
							}
						]
					},
					{
						"name": "SAT_SECCIONES",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HUB_SECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nSecciones_KEY, \nSecciones, \nMAX(LOAD_DTS) START_DTS , CAST(NULL AS DATE) END_DTS, \nMAX(REC_SRC) REC_SRC  \n--INTO INE.SAT_SECCIONES\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.SAT_SECCIONES h  WHERE h.Secciones_KEY = o.Secciones_KEY AND START_DTS = O.LOAD_DTS) AND\nSecciones IS NOT NULL\nGROUP BY Secciones_KEY, Secciones;\n\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "SAT_SECCIONES"
								}
							}
						]
					},
					{
						"name": "LINK_SECCION_DISTRITO_MUNICIPIO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SAT_SECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SAT_DISTRITOS",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "SAT_MUNICIPIO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSELECT \nMAX(CONVERT(nvarchar(32),(HASHBYTES('SHA2_256',concat(LTRIM(RTRIM(\"Municipios\")),LTRIM(RTRIM(\"Distritos\")),LTRIM(RTRIM(\"Secciones\")) ))),2)) as \"LINK_SECC_DIST_MUNIKEY\",\nMunicipios_KEY, Distritos_KEY, Secciones_KEY,\nMAX(LOAD_DTS) LOAD_DTS , MAX(REC_SRC) REC_SRC \n--INTO INE.LINK_SECCION_DISTRITO_MUNICIPIO\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE NOT EXISTS( SELECT 1 FROM INE.LINK_SECCION_DISTRITO_MUNICIPIO WHERE LINK_SECC_DIST_MUNIKEY=CONVERT(nvarchar(32),(HASHBYTES('SHA2_256',concat(LTRIM(RTRIM(\"Municipios\")),LTRIM(RTRIM(\"Distritos\")),LTRIM(RTRIM(\"Secciones\")) ))),2))\nGROUP BY Municipios_KEY, Distritos_KEY, Secciones_KEY;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_SECCION_DISTRITO_MUNICIPIO"
								}
							}
						]
					},
					{
						"name": "HUB_METRICAS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nmetrica_KEY , \nmetrica , \nMAX(LOAD_DTS) LOAD_DTS , \nMAX(REC_SRC) REC_SRC  \nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\n NOT EXISTS(   SELECT 1  FROM open_data.INE.HUB_METRICA h  WHERE h.metrica_KEY = o.metrica_KEY ) AND\nmetrica  IS NOT NULL\nGROUP BY metrica_KEY ,metrica;\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "HUB_METRICA"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_SECCION_DISTRITO_MUNICIPIO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "HUB_METRICAS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY,\nSecciones_KEY ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_SECCION_METRICA_ANNO WHERE LINK_DATOS_NIVEL_SECCION_METRICA_ANNO_KEY=LINK_KEY) and\nSecciones is not null \nAND Sexo = 'Total';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY,\nDistritos_KEY  ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  is not null AND Secciones IS NULL \nAND Sexo = 'Total' ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO_KEY,\nMunicipios_KEY  ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  IS NULL AND Sexo = 'Total';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_SECCION_GENERO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_SECCION_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_SECCION_GENERO_METRICA_ANNO_KEY,\nSecciones_KEY ,\n metrica_KEY, \n anno,\n Sexo,\n valor_metrica, \nLOAD_DTS, REC_SRC\n--INTO open_data.INE.LINK_DATOS_NIVEL_SECCION_GENERO_METRICA_ANNO\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_SECCION_GENERO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_SECCION_GENERO_METRICA_ANNO_KEY=LINK_KEY) and\nSecciones is not null \n;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_SECCION_GENERO_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_DISTRITO_GENERO_METRICA_ANNO",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY,\nDistritos_KEY  ,\n metrica_KEY, \n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO WHERE LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO_KEY=LINK_KEY) and\nDistritos  is not null AND Secciones IS NULL \nAND Sexo = 'Total' ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_DISTRITO_METRICA_ANNO"
								}
							}
						]
					},
					{
						"name": "LINK_DATOS_NIVEL_MUNICIPIO_GENERO_METRICA_ANNO_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nLINK_KEY LINK_DATOS_NIVEL_MUNICIPIO_METRICA_GENERO_ANNO_KEY,\nMunicipios_KEY  ,\n metrica_KEY, \n Sexo,\n anno,\n valor_metrica, \nLOAD_DTS, REC_SRC\n--INTO INE.LINK_DATOS_NIVEL_MUNICIPIO_METRICA_GENERO_ANNO\nFROM open_data.STG.@{pipeline().parameters.ORIGEN} o\nWHERE\nNOT EXISTS( SELECT 1 FROM INE.LINK_DATOS_NIVEL_MUNICIPIO_METRICA_GENERO_ANNO WHERE LINK_DATOS_NIVEL_MUNICIPIO_METRICA_GENERO_ANNO_KEY=LINK_KEY) and\nDistritos  IS NULL;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "INE",
									"tabla": "LINK_DATOS_NIVEL_MUNICIPIO_METRICA_ANNO"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ORIGEN": {
						"type": "string",
						"defaultValue": "INE_UMBRALES_GENERO_HD"
					}
				},
				"folder": {
					"name": "3 STG TO DWH"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-01T18:12:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3 datos farms a DWH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DV DIRECCIONES",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "INSERT INTO MAESTROS.LINK_DIRECCIONES\r\n    (hash_direccion, hash_codigo_provincia, hash_codigo_municipio, hash_codigo_tipo_via, [Código Postal], [Nombre de la vía], [Número Vía], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_direccion, \r\n    hash_codigo_provincia, \r\n    hash_codigo_municipio, \r\n    hash_codigo_tipo_via, \r\n    [Código Postal], \r\n    [Nombre de la vía], \r\n    [Número Vía], \r\n    LOAD_DTS \r\nFROM \r\n    farma.staging.vista_direcciones_hash d\r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.LINK_DIRECCIONES l WHERE l.hash_direccion = d.hash_direccion);\r\n\r\nINSERT INTO MAESTROS.HUB_TIPO_VIA \r\n    (hash_codigo_tipo_via, [Código Tipo Vía], LOAD_DTS)\r\nSELECT \r\n    d.hash_codigo_tipo_via, \r\n    d.[Código Tipo Vía], \r\n    LOAD_DTS\r\nFROM \r\n    staging.vista_direcciones_hash d\r\nWHERE     NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_VIA htv WHERE htv.hash_codigo_tipo_via = d.hash_codigo_tipo_via)\r\n;\r\n\r\nINSERT INTO MAESTROS.HUB_municipio\r\n    (hash_codigo_municipio, Municipio, [Código Municipio], LOAD_DTS)\r\nSELECT DISTINCT \r\n    d.hash_codigo_municipio, \r\n    d.Municipio, \r\n    d.[Código Municipio], \r\n    d.LOAD_DTS  LOAD_DTS\r\n    FROM \r\n    staging.vista_direcciones_hash d\r\nWHERE  NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_municipio hm WHERE hm.hash_codigo_municipio = d.hash_codigo_municipio)\r\n;\r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.vista_direcciones_hash Stg \r\n       INNER JOIN MAESTROS.SAT_DIRECCIONES Sat\r\n           ON  Sat.hash_direccion      = Stg.hash_direccion\r\n WHERE Sat.hash_diff <> Stg.[hash_diff]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ; \r\n\r\nINSERT INTO MAESTROS.SAT_DIRECCIONES \r\n    (hash_direccion, direccion_normalizada, lat, lng, geocodificador, cp, dq, START_DTS, END_DTS,hash_diff)\r\nSELECT DISTINCT \r\n    d.hash_direccion, \r\n    d.direccion_normalizada, \r\n    d.lat, \r\n    d.lng, \r\n    d.geocodificador, \r\n    d.cp, \r\n    d.dq, \r\n    d.LOAD_DTS START_DTS, \r\n    NULL END_DTS,\r\n    hash_diff\r\n--INTO MAESTROS.SAT_DIRECCIONES\r\n    FROM \r\n    staging.vista_direcciones_hash d    \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.SAT_DIRECCIONES sd WHERE sd.hash_direccion = d.hash_direccion AND sd.hash_diff = d.hash_diff);\r\n      \r\nINSERT INTO MAESTROS.HUB_PROVINCIA \r\n    (hash_codigo_provincia, Provincia, [Código Provincia], LOAD_DTS)\r\nSELECT DISTINCT\r\n    hash_codigo_provincia, \r\n    Provincia, \r\n    [Código Provincia], \r\n    LOAD_DTS\r\n--INTO MAESTROS.HUB_PROVINCIA  \r\nFROM \r\n    farma.staging.vista_direcciones_hash d\r\nWHERE     NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_PROVINCIA l WHERE l.hash_codigo_provincia = d.hash_codigo_provincia)\r\n;\r\n\r\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "DV CENTROS",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DV DIRECCIONES",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "\r\n\r\nINSERT INTO MAESTROS.HUB_CODIGO_CENTRO \r\n    (hash_codigo_centro, [Código de Centro Normalizado REGCESS (CCN)], LOAD_DTS)\r\nSELECT \r\n    DISTINCT hash_codigo_centro, \r\n    [Código de Centro Normalizado REGCESS (CCN)], \r\n    LOAD_DTS\r\n--INTO MAESTROS.HUB_CODIGO_CENTRO \r\n    FROM \r\n    farma.staging.hash_centros_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_CODIGO_CENTRO WHERE hash_codigo_centro = farma.staging.hash_centros_view.hash_codigo_centro);\r\n   \r\n INSERT INTO MAESTROS.HUB_TIPO_CENTRO \r\n    (hash_tipo_centro, [Tipo centro], LOAD_DTS)\r\nSELECT \r\n    DISTINCT hash_tipo_centro, \r\n    [Tipo centro], \r\n    LOAD_DTS\r\n--INTO MAESTROS.HUB_TIPO_CENTRO \r\n    FROM \r\n    farma.staging.hash_centros_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_CENTRO WHERE hash_tipo_centro = farma.staging.hash_centros_view.hash_tipo_centro)\r\n   ;\r\n  \r\n  INSERT INTO MAESTROS.HUB_DEPENDENCIA_FUNCIONAL \r\n    (hash_dependencia_funcional, [Dependencia  Funcional], LOAD_DTS)\r\nSELECT \r\n    DISTINCT hash_dependencia_funcional, \r\n    [Dependencia  Funcional], \r\n    LOAD_DTS\r\n--INTO MAESTROS.HUB_DEPENDENCIA_FUNCIONAL \r\n    FROM \r\n    farma.staging.hash_centros_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_DEPENDENCIA_FUNCIONAL WHERE hash_dependencia_funcional = farma.staging.hash_centros_view.hash_dependencia_funcional);\r\n   \r\n   INSERT INTO MAESTROS.HUB_GRUPO_FUNCIONAL \r\n    (hash_grupo_funcional, [Grupo de dependencia  Funcional], LOAD_DTS)\r\nSELECT \r\n    DISTINCT hash_grupo_funcional, \r\n    [Grupo de dependencia  Funcional], \r\n    LOAD_DTS\r\n--INTO MAESTROS.HUB_GRUPO_FUNCIONAL\r\n    FROM \r\n    farma.staging.hash_centros_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_GRUPO_FUNCIONAL WHERE hash_grupo_funcional = farma.staging.hash_centros_view.hash_grupo_funcional);\r\n   \r\n   INSERT INTO MAESTROS.HUB_TIPO_AUTORIZACION \r\n    (hash_tipo_autorizacion, [Tipo de última Autorización], LOAD_DTS)\r\nSELECT \r\n    DISTINCT hash_tipo_autorizacion, \r\n    [Tipo de última Autorización], \r\n    LOAD_DTS\r\n--INTO MAESTROS.HUB_TIPO_AUTORIZACION \r\n    FROM \r\n    farma.staging.hash_centros_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_AUTORIZACION WHERE hash_tipo_autorizacion = farma.staging.hash_centros_view.hash_tipo_autorizacion);\r\n   \r\n\r\n   \r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.hash_centros_view Stg \r\n       INNER JOIN MAESTROS.SAT_CENTRO Sat\r\n           ON  Sat.hash_codigo_centro      = Stg.hash_codigo_centro\r\n WHERE Sat.hash_diff <> Stg.[hash_diff]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ;    \r\n   \r\n   \r\nINSERT INTO MAESTROS.SAT_CENTRO \r\n    (hash_codigo_centro, \r\n    [Nombre Centro], \r\n    [Código Comunidad Autónoma], \r\n    [Correo  Electrónico], \r\n    Fax, \r\n    Teléfono, \r\n    Url, \r\n    [Fecha Autorización  de Funcionamiento], \r\n    [Fecha de última  Autorización],\r\n     START_DTS,\r\n     END_DTS,\r\n     hash_diff)\r\nSELECT \r\n    DISTINCT hash_codigo_centro, \r\n    [Nombre Centro], \r\n    [Código Comunidad Autónoma], \r\n    [Correo  Electrónico], \r\n    Fax, \r\n    Teléfono, \r\n    Url, \r\n    [Fecha Autorización  de Funcionamiento], \r\n    [Fecha de última  Autorización],\r\n    LOAD_DTS  START_DTS,\r\n    NULL  END_DTS,\r\n    hash_diff    \r\n--INTO MAESTROS.SAT_CENTRO \r\n    FROM \r\n    farma.staging.hash_centros_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.SAT_CENTRO WHERE hash_codigo_centro = farma.staging.hash_centros_view.hash_codigo_centro AND hash_diff=hash_centros_view.hash_diff);\r\n   \r\n   \r\n   \r\n   \r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.hash_centros_view Stg \r\n       INNER JOIN MAESTROS.LINK_CENTRO_DIRECCION Sat\r\n           ON  Sat.hash_codigo_centro      = Stg.hash_codigo_centro\r\n WHERE Sat.hash_direccion <> Stg.[hash_direccion]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ;    \r\n \r\n   \r\nINSERT INTO MAESTROS.LINK_CENTRO_DIRECCION \r\n    ( hash_codigo_centro,\r\n     hash_direccion,\r\n     START_DTS,\r\n     END_DTS)   \r\n   SELECT \r\n    DISTINCT hash_codigo_centro, hash_direccion , LOAD_DTS START_DTS, NULL END_DTS\r\n--INTO MAESTROS.LINK_CENTRO_DIRECCION\r\nFROM \r\n    farma.staging.hash_centros_view    \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.LINK_CENTRO_DIRECCION \r\n   \t\t\t\tWHERE hash_codigo_centro = farma.staging.hash_centros_view.hash_codigo_centro AND\r\n   \t\t\t    hash_direccion =farma.staging.hash_centros_view.hash_direccion );\r\n   \r\n   \r\n\r\n\r\n\r\n\r\n  \r\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "DV medicos",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DV CENTROS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "-- 1. HUB_CODIGO_CENTRO\r\nINSERT INTO MAESTROS.HUB_CODIGO_CENTRO \r\n    (hash_codigo_centro, [Código de Centro Normalizado REGCESS (CCN)], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_codigo_centro, \r\n    [Código de Centro Normalizado REGCESS (CCN)], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_medicos_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_CODIGO_CENTRO WHERE hash_codigo_centro = farma.staging.hash_medicos_view.hash_codigo_centro);\r\n\r\n-- 2. HUB_TIPO_CENTRO\r\nINSERT INTO MAESTROS.HUB_TIPO_CENTRO \r\n    (hash_tipo_centro, [Tipo centro], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_tipo_centro, \r\n    [Tipo centro], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_medicos_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_CENTRO WHERE hash_tipo_centro = farma.staging.hash_medicos_view.hash_tipo_centro);\r\n\r\n-- 3. HUB_DEPENDENCIA_FUNCIONAL\r\nINSERT INTO MAESTROS.HUB_DEPENDENCIA_FUNCIONAL \r\n    (hash_dependencia_funcional, [Dependencia  Funcional], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_dependencia_funcional, \r\n    [Dependencia  Funcional], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_medicos_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_DEPENDENCIA_FUNCIONAL WHERE hash_dependencia_funcional = farma.staging.hash_medicos_view.hash_dependencia_funcional);\r\n\r\n-- 4. HUB_GRUPO_FUNCIONAL\r\nINSERT INTO MAESTROS.HUB_GRUPO_FUNCIONAL \r\n    (hash_grupo_funcional, [Grupo de dependencia  Funcional], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_grupo_funcional, \r\n    [Grupo de dependencia  Funcional], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_medicos_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_GRUPO_FUNCIONAL WHERE hash_grupo_funcional = farma.staging.hash_medicos_view.hash_grupo_funcional);\r\n\r\n-- 5. HUB_TIPO_AUTORIZACION\r\nINSERT INTO MAESTROS.HUB_TIPO_AUTORIZACION \r\n    (hash_tipo_autorizacion, [Tipo de última Autorización], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_tipo_autorizacion, \r\n    [Tipo de última Autorización], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_medicos_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_AUTORIZACION WHERE hash_tipo_autorizacion = farma.staging.hash_medicos_view.hash_tipo_autorizacion);\r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.hash_centros_view Stg \r\n       INNER JOIN MAESTROS.SAT_CENTRO Sat\r\n           ON  Sat.hash_codigo_centro      = Stg.hash_codigo_centro\r\n WHERE Sat.hash_diff <> Stg.[hash_diff]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ;    \r\n   \r\n\r\n\r\nINSERT INTO MAESTROS.SAT_CENTRO \r\n    (hash_codigo_centro, \r\n    [Nombre Centro], \r\n    [Código Comunidad Autónoma], \r\n    [Correo  Electrónico], \r\n    Fax, \r\n    Teléfono, \r\n    Url, \r\n    [Fecha Autorización  de Funcionamiento], \r\n    [Fecha de última  Autorización],\r\n     START_DTS,\r\n     END_DTS,\r\n     hash_diff)\r\nSELECT \r\n    DISTINCT hash_codigo_centro, \r\n    [Nombre Centro], \r\n    [Código Comunidad Autónoma], \r\n    [Correo  Electrónico], \r\n    Fax, \r\n    Teléfono, \r\n    Url, \r\n    [Fecha Autorización  de Funcionamiento], \r\n    [Fecha de última  Autorización],\r\n    LOAD_DTS  START_DTS,\r\n    NULL  END_DTS,\r\n    hash_diff    \r\n--INTO MAESTROS.SAT_CENTRO \r\n    FROM \r\n    farma.staging.hash_medicos_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.SAT_CENTRO WHERE hash_codigo_centro = farma.staging.hash_medicos_view.hash_codigo_centro AND hash_diff=hash_medicos_view.hash_diff);\r\n   \r\n\r\n   \r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.hash_centros_view Stg \r\n       INNER JOIN MAESTROS.LINK_CENTRO_DIRECCION Sat\r\n           ON  Sat.hash_codigo_centro      = Stg.hash_codigo_centro\r\n WHERE Sat.hash_direccion <> Stg.[hash_direccion]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ;    \r\n \r\n   \r\n   \r\nINSERT INTO MAESTROS.LINK_CENTRO_DIRECCION \r\n    ( hash_codigo_centro,\r\n     hash_direccion,\r\n     START_DTS,\r\n     END_DTS)   \r\n   SELECT \r\n    DISTINCT hash_codigo_centro, hash_direccion , LOAD_DTS START_DTS, NULL END_DTS\r\n--INTO MAESTROS.LINK_CENTRO_DIRECCION\r\nFROM \r\n    farma.staging.hash_medicos_view    \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.LINK_CENTRO_DIRECCION \r\n   \t\t\t\tWHERE hash_codigo_centro = farma.staging.hash_medicos_view.hash_codigo_centro AND\r\n   \t\t\t    hash_direccion =farma.staging.hash_medicos_view.hash_direccion );\r\n   "
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "DV hospitales",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DV medicos",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "-- 1. HUB_CODIGO_CENTRO\r\nINSERT INTO MAESTROS.HUB_CODIGO_CENTRO \r\n    (hash_codigo_centro, [Código de Centro Normalizado REGCESS (CCN)], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_codigo_centro, \r\n    [Código de Centro Normalizado REGCESS (CCN)], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_hospital_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_CODIGO_CENTRO WHERE hash_codigo_centro = farma.staging.hash_hospital_view.hash_codigo_centro);\r\n\r\n-- 2. HUB_TIPO_CENTRO\r\nINSERT INTO MAESTROS.HUB_TIPO_CENTRO \r\n    (hash_tipo_centro, [Tipo centro], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_tipo_centro, \r\n    [Tipo centro], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_hospital_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_CENTRO WHERE hash_tipo_centro = farma.staging.hash_hospital_view.hash_tipo_centro);\r\n\r\n-- 3. HUB_DEPENDENCIA_FUNCIONAL\r\nINSERT INTO MAESTROS.HUB_DEPENDENCIA_FUNCIONAL \r\n    (hash_dependencia_funcional, [Dependencia  Funcional], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_dependencia_funcional, \r\n    [Dependencia  Funcional], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_hospital_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_DEPENDENCIA_FUNCIONAL WHERE hash_dependencia_funcional = farma.staging.hash_hospital_view.hash_dependencia_funcional);\r\n\r\n-- 4. HUB_GRUPO_FUNCIONAL\r\nINSERT INTO MAESTROS.HUB_GRUPO_FUNCIONAL \r\n    (hash_grupo_funcional, [Grupo de dependencia  Funcional], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_grupo_funcional, \r\n    [Grupo de dependencia  Funcional], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_hospital_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_GRUPO_FUNCIONAL WHERE hash_grupo_funcional = farma.staging.hash_hospital_view.hash_grupo_funcional);\r\n\r\n-- 5. HUB_TIPO_AUTORIZACION\r\nINSERT INTO MAESTROS.HUB_TIPO_AUTORIZACION \r\n    (hash_tipo_autorizacion, [Tipo de última Autorización], LOAD_DTS)\r\nSELECT DISTINCT \r\n    hash_tipo_autorizacion, \r\n    [Tipo de última Autorización], \r\n    LOAD_DTS\r\nFROM farma.staging.hash_hospital_view\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.HUB_TIPO_AUTORIZACION WHERE hash_tipo_autorizacion = farma.staging.hash_hospital_view.hash_tipo_autorizacion);\r\n\r\n\r\n\r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.hash_centros_view Stg \r\n       INNER JOIN MAESTROS.SAT_CENTRO Sat\r\n           ON  Sat.hash_codigo_centro      = Stg.hash_codigo_centro\r\n WHERE Sat.hash_diff <> Stg.[hash_diff]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ;    \r\n   \r\n\r\n\r\nINSERT INTO MAESTROS.SAT_CENTRO \r\n    (hash_codigo_centro, \r\n    [Nombre Centro], \r\n    [Código Comunidad Autónoma], \r\n    [Correo  Electrónico], \r\n    Fax, \r\n    Teléfono, \r\n    Url, \r\n    [Fecha Autorización  de Funcionamiento], \r\n    [Fecha de última  Autorización],\r\n     START_DTS,\r\n     END_DTS,\r\n     hash_diff)\r\nSELECT \r\n    DISTINCT hash_codigo_centro, \r\n    [Nombre Centro], \r\n    [Código Comunidad Autónoma], \r\n    [Correo  Electrónico], \r\n    Fax, \r\n    Teléfono, \r\n    Url, \r\n    [Fecha Autorización  de Funcionamiento], \r\n    [Fecha de última  Autorización],\r\n    LOAD_DTS  START_DTS,\r\n    NULL  END_DTS,\r\n    hash_diff    \r\n--INTO MAESTROS.SAT_CENTRO \r\n    FROM \r\n    farma.staging.hash_hospital_view \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.SAT_CENTRO WHERE hash_codigo_centro = farma.staging.hash_hospital_view.hash_codigo_centro AND hash_diff=hash_hospital_view.hash_diff);\r\n   \r\n\r\n\r\nUPDATE Sat\r\n SET Sat.START_DTS = DATEADD(d,-1,Stg.LOAD_DTS)\r\n FROM staging.hash_centros_view Stg \r\n       INNER JOIN MAESTROS.LINK_CENTRO_DIRECCION Sat\r\n           ON  Sat.hash_codigo_centro      = Stg.hash_codigo_centro\r\n WHERE Sat.hash_direccion <> Stg.[hash_direccion]\r\n               AND Sat.[END_DTS] IS NULL\r\n               AND Sat.[START_DTS] < Stg.LOAD_DTS\r\n ;    \r\n \r\n   \r\n   \r\nINSERT INTO MAESTROS.LINK_CENTRO_DIRECCION \r\n    ( hash_codigo_centro,\r\n     hash_direccion,\r\n     START_DTS,\r\n     END_DTS)   \r\n   SELECT \r\n    DISTINCT hash_codigo_centro, hash_direccion , LOAD_DTS START_DTS, NULL END_DTS\r\n--INTO MAESTROS.LINK_CENTRO_DIRECCION\r\nFROM \r\n    farma.staging.hash_hospital_view    \r\nWHERE \r\n    NOT EXISTS (SELECT 1 FROM MAESTROS.LINK_CENTRO_DIRECCION \r\n   \t\t\t\tWHERE hash_codigo_centro = farma.staging.hash_hospital_view.hash_codigo_centro AND\r\n   \t\t\t    hash_direccion =farma.staging.hash_hospital_view.hash_direccion );\r\n \r\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3 STG TO DWH"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-18T12:18:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/farma')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/4 calculos entrena farmas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "datos ine",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy ine  a farmas_copy1",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Copy catastro a farmas",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM staging.datos_ine_historicos dih \r\nWHERE anno = (SELECT MAX(anno) FROM staging.datos_ine_historicos WHERE  [Tamaño medio del hogar] IS NOT NULL);\r\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'DATOS_INE_ULTIMOS' AND type = 'U')\nBEGIN\n    \tdrop TABLE calculos.DATOS_INE_ULTIMOS;\n\tEND",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "calculos",
									"tabla": "DATOS_INE_ULTIMOS"
								}
							}
						]
					},
					{
						"name": "datos_catastro_ubicacion",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "viviendas_seccion",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "  SELECT\r\n     u.HASH,\r\n    1 AS grado_proximidad, \r\n    CAST(REPLACE(distancia_farmacia_cercana2, ',', '.') AS float) - CAST(REPLACE(distancia_farmacia_cercana1, ',', '.') AS float) AS dif_distancia,\r\n    MAX(CAST(REPLACE(distancia_farmacia_cercana2, ',', '.') AS float) - CAST(REPLACE(distancia_farmacia_cercana1, ',', '.') AS float)) OVER (PARTITION BY u.HASH) AS max_dif_distancia,\r\n    MIN(CAST(REPLACE(distancia_farmacia_cercana2, ',', '.') AS float) - CAST(REPLACE(distancia_farmacia_cercana1, ',', '.') AS float)) OVER (PARTITION BY u.HASH) AS min_dif_distancia,\r\n    c.*\r\n    FROM farma.staging.ZI_catastro zc\r\n    JOIN staging.ubicaciones u ON u.hash_direccion = zc.hash_farmacia_cercana1 \r\n    JOIN\r\n    (SELECT cod_agr_portales ,ref_cat_finca, seccioncensal,  superf_media_viviendas,\r\n        altura_plantas_viviendas, total_plantas_viviendas, antiguedad_viviendas,  superf_media_inmuebles,\r\n        altura_plantas_inmuebles, total_plantas_inmuebles, antiguedad_inmuebles,\r\n        usos, cultivos, superf_media_oficinas,\r\n        superf_media_comercios, num_viviendas\r\n        FROM staging.catastro) c ON c.ref_cat_finca = zc.ref_cat_finca     \r\nUNION ALL\r\n    SELECT\r\n    u.HASH,\r\n    -1 AS grado_proximidad, \r\n    CAST(REPLACE(distancia_farmacia_cercana2, ',', '.') AS float) - CAST(REPLACE(distancia_farmacia_cercana1, ',', '.') AS float) AS dif_distancia,\r\n    MAX(CAST(REPLACE(distancia_farmacia_cercana2, ',', '.') AS float) - CAST(REPLACE(distancia_farmacia_cercana1, ',', '.') AS float)) OVER (PARTITION BY u.HASH) AS max_dif_distancia,\r\n    MIN(CAST(REPLACE(distancia_farmacia_cercana2, ',', '.') AS float) - CAST(REPLACE(distancia_farmacia_cercana1, ',', '.') AS float)) OVER (PARTITION BY u.HASH) AS min_dif_distancia,\r\n    c.*\r\n    FROM farma.staging.ZI_catastro zc\r\n    JOIN staging.ubicaciones u ON u.hash_direccion = zc.hash_farmacia_cercana2\r\n    JOIN\r\n    (SELECT cod_agr_portales ,ref_cat_finca, seccioncensal,  superf_media_viviendas,\r\n        altura_plantas_viviendas, total_plantas_viviendas, antiguedad_viviendas,  superf_media_inmuebles,\r\n        altura_plantas_inmuebles, total_plantas_inmuebles, antiguedad_inmuebles,\r\n        usos, cultivos, superf_media_oficinas,\r\n        superf_media_comercios, num_viviendas\r\n        FROM staging.catastro) c ON c.ref_cat_finca = zc.ref_cat_finca;\r\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'datos_catastro_ubicacion' AND type = 'U')\nBEGIN\n    \tdrop TABLE calculos.datos_catastro_ubicacion;\n\tEND",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "calculos",
									"tabla": "datos_catastro_ubicacion"
								}
							}
						]
					},
					{
						"name": "viviendas_seccion",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "datos ine",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "WITH VIVIENDAS_SECCION AS (\n    SELECT \n        seccioncensal, \n        SUM(num_viviendas) AS num_viviendas\n    FROM \n        farma.staging.catastro\n    GROUP BY \n        seccioncensal\n)\nSELECT \n    DIU.seccioncensal,\n    CASE WHEN NULLIF(vs.num_viviendas, 0) IS NOT NULL THEN diu.Población / vs.num_viviendas ELSE NULL END AS poblacion_vivienda,\n    diu.[Renta bruta media por persona] AS renta_bruta_media_persona,\n    diu.[Fuente de ingreso: salario] AS ingreso_salario,\n    diu.[Fuente de ingreso: pensiones] AS ingreso_pensiones,\n    diu.[Fuente de ingreso: prestaciones por desempleo] AS ingreso_prestaciones_desempleo,\n    diu.[Fuente de ingreso: otras prestaciones] AS ingreso_otras_prestaciones,\n    diu.[Fuente de ingreso: otros ingresos] AS ingreso_otros,\n    (diu.[Población con ingresos por unidad de consumo por debajo de 10.000 Euros]/100) AS porcentaje_ingresos_debajo_10000,\n    (diu.[Población con ingresos por unidad de consumo por debajo de 5.000 Euros]/100) AS porcentaje_ingresos_debajo_5000,\n    (diu.[Población con ingresos por unidad de consumo por debajo de 7.500 Euros]/100) AS porcentaje_ingresos_debajo_7500,\n    (diu.[Población con ingresos por unidad de consumo por debajo 40% de la mediana]/100) AS porcentaje_ingresos_debajo_40,\n    (diu.[Población con ingresos por unidad de consumo por debajo 50% de la mediana]/100) AS porcentaje_ingresos_debajo_50,\n    (diu.[Población con ingresos por unidad de consumo por debajo 60% de la mediana]/100) AS porcentaje_ingresos_debajo_60,\n    (diu.[Población con ingresos por unidad de consumo por encima 140% de la mediana]/100) AS porcentaje_ingresos_encima_140,\n    (diu.[Población con ingresos por unidad de consumo por encima 160% de la mediana]/100) AS porcentaje_ingresos_encima_160,\n    (diu.[Población con ingresos por unidad de consumo por encima 200% de la mediana]/100) AS porcentaje_ingresos_encima_200,\n    (diu.[Porcentaje de hogares unipersonales]/100) AS porcentaje_hogares_unipersonales,\n    (diu.[Porcentaje de población menor de 18 años]/100) AS porcentaje_poblacion_menor_18,\n    (diu.[Porcentaje de población de 65 y más años]/100) AS porcentaje_poblacion_65_mas,\n    (diu.[Porcentaje de población española]/100) AS porcentaje_poblacion_española,\n    CASE WHEN NULLIF(diu.Población, 0) IS NOT NULL THEN (diu.[Ambos Sexos_0-4]/diu.Población) ELSE NULL END AS porcentaje_menores_5,\n    CASE WHEN NULLIF(diu.Población, 0) IS NOT NULL THEN \n        (([Ambos Sexos_75-79] + [Ambos Sexos_80-84] + [Ambos Sexos_85-89] + [Ambos Sexos_90-94] +[Ambos Sexos_95-99]) / diu.Población) \n    ELSE NULL END AS porcentaje_mayores_75,\n    CASE WHEN NULLIF(diu.Población, 0) IS NOT NULL THEN (diu.[Ambos Sexos_Total África]/diu.Población) ELSE NULL END AS porcentaje_Africa   \nFROM  \n    calculos.DATOS_INE_ULTIMOS AS diu \nLEFT JOIN \n    VIVIENDAS_SECCION AS vs ON vs.seccioncensal = diu.seccioncensal;\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT * FROM sys.tables WHERE name = 'VIVIENDAS_SECCION' AND type = 'U')\nBEGIN\n    \tdrop TABLE calculos.VIVIENDAS_SECCION;\n\tEND",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "calculos",
									"tabla": "DATOS_INE_RELATIVOS_VIVIENDAS"
								}
							}
						]
					},
					{
						"name": "Copy catastro a farmas",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.catastro",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "geo_area",
									"tabla": "tb_catastro_portales_nueva"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "catastro"
								}
							}
						]
					},
					{
						"name": "Copy ine  a farmas_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.datos_ine_historicos",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "geo_area",
									"tabla": "datos_secciones_historico"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "staging",
									"tabla": "datos_ine_historicos"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "4 DWH- DM"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-02T13:41:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/farma')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/4 carga datos seccion historicos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CREA DATOS_SECCION_HISTORICO",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  \r\nhs.Cod_Secciones seccioncensal,\r\nl.anno ,\r\navg(CASE WHEN hm.metrica='Tamaño medio del hogar' THEN l.valor_metrica  END) \"Tamaño medio del hogar\",\r\navg(CASE WHEN hm.metrica='Media de la renta por unidad de consumo' THEN l.valor_metrica  END) \"Media de la renta por unidad de consumo\",\r\navg(CASE WHEN hm.metrica='Mediana de la renta por unidad de consumo' THEN l.valor_metrica  END) \"Mediana de la renta por unidad de consumo\",\r\navg(CASE WHEN hm.metrica='Renta bruta media por hogar' THEN l.valor_metrica  END) \"Renta bruta media por hogar\",\r\navg(CASE WHEN hm.metrica='Renta bruta media por persona' THEN l.valor_metrica  END) \"Renta bruta media por persona\",\r\navg(CASE WHEN hm.metrica='Renta neta media por hogar' THEN l.valor_metrica  END) \"Renta neta media por hogar\",\r\navg(CASE WHEN hm.metrica='Renta neta media por persona ' THEN l.valor_metrica  END) \"Renta neta media por persona \",\r\navg(CASE WHEN hm.metrica='Fuente de ingreso: otras prestaciones' THEN l.valor_metrica  END) \"Fuente de ingreso: otras prestaciones\",\r\navg(CASE WHEN hm.metrica='Fuente de ingreso: otros ingresos' THEN l.valor_metrica  END) \"Fuente de ingreso: otros ingresos\",\r\navg(CASE WHEN hm.metrica='Fuente de ingreso: pensiones' THEN l.valor_metrica  END) \"Fuente de ingreso: pensiones\",\r\navg(CASE WHEN hm.metrica='Fuente de ingreso: prestaciones por desempleo' THEN l.valor_metrica  END) \"Fuente de ingreso: prestaciones por desempleo\",\r\navg(CASE WHEN hm.metrica='Fuente de ingreso: salario' THEN l.valor_metrica  END) \"Fuente de ingreso: salario\",\r\navg(CASE WHEN hm.metrica='Población con ingresos por unidad de consumo por debajo de 10.000 Euros' THEN l.valor_metrica  END) \"Población con ingresos por unidad de consumo por debajo de 10.000 Euros\",\r\navg(CASE WHEN hm.metrica='Población con ingresos por unidad de consumo por debajo de 5.000 Euros' THEN l.valor_metrica  END) \"Población con ingresos por unidad de consumo por debajo de 5.000 Euros\",\r\navg(CASE WHEN hm.metrica='Población con ingresos por unidad de consumo por debajo de 7.500 Euros' THEN l.valor_metrica  END) \"Población con ingresos por unidad de consumo por debajo de 7.500 Euros\",\r\navg(CASE WHEN hm.metrica='Población con ingresos por unidad de consumo por debajo 40% de la mediana' THEN l.valor_metrica  END) \"Población con ingresos por unidad de consumo por debajo 40% de la mediana\",\r\navg(CASE WHEN hm.metrica='Población con ingresos por unidad de consumo por debajo 50% de la mediana' THEN l.valor_metrica  END) \"Población con ingresos por unidad de consumo por debajo 50% de la mediana\",\r\navg(CASE WHEN hm.metrica='Población con ingresos por unidad de consumo por debajo 60% de la mediana' THEN l.valor_metrica  END) \"Población con ingresos por unidad de consumo por debajo 60% de la mediana\",\r\navg(CASE WHEN hm.metrica='Población con ingresos por unidad de consumo por encima 140% de la mediana' THEN l.valor_metrica  END) \"Población con ingresos por unidad de consumo por encima 140% de la mediana\",\r\navg(CASE WHEN hm.metrica='Población con ingresos por unidad de consumo por encima 160% de la mediana' THEN l.valor_metrica  END) \"Población con ingresos por unidad de consumo por encima 160% de la mediana\",\r\navg(CASE WHEN hm.metrica='Población con ingresos por unidad de consumo por encima 200% de la mediana' THEN l.valor_metrica  END) \"Población con ingresos por unidad de consumo por encima 200% de la mediana\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_0-4' THEN l.valor_metrica  END) \"Ambos Sexos_0-4\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_100 y más' THEN l.valor_metrica  END) \"Ambos Sexos_100 y más\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_10-14' THEN l.valor_metrica  END) \"Ambos Sexos_10-14\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_15-19' THEN l.valor_metrica  END) \"Ambos Sexos_15-19\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_20-24' THEN l.valor_metrica  END) \"Ambos Sexos_20-24\",\r\navg(CASE WHEN hm.metrica='Edad media de la población' THEN l.valor_metrica  END) \"Edad media de la población\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_25-29' THEN l.valor_metrica  END) \"Ambos Sexos_25-29\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_30-34' THEN l.valor_metrica  END) \"Ambos Sexos_30-34\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_35-39' THEN l.valor_metrica  END) \"Ambos Sexos_35-39\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_40-44' THEN l.valor_metrica  END) \"Ambos Sexos_40-44\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_45-49' THEN l.valor_metrica  END) \"Ambos Sexos_45-49\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_50-54' THEN l.valor_metrica  END) \"Ambos Sexos_50-54\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_55-59' THEN l.valor_metrica  END) \"Ambos Sexos_55-59\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_5-9' THEN l.valor_metrica  END) \"Ambos Sexos_5-9\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_60-64' THEN l.valor_metrica  END) \"Ambos Sexos_60-64\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_65-69' THEN l.valor_metrica  END) \"Ambos Sexos_65-69\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_70-74' THEN l.valor_metrica  END) \"Ambos Sexos_70-74\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_75-79' THEN l.valor_metrica  END) \"Ambos Sexos_75-79\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_80-84' THEN l.valor_metrica  END) \"Ambos Sexos_80-84\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_85-89' THEN l.valor_metrica  END) \"Ambos Sexos_85-89\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_90-94' THEN l.valor_metrica  END) \"Ambos Sexos_90-94\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_95-99' THEN l.valor_metrica  END) \"Ambos Sexos_95-99\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Total' THEN l.valor_metrica  END) \"Ambos Sexos_Total\",\r\navg(CASE WHEN hm.metrica='Hombres_0-4' THEN l.valor_metrica  END) \"Hombres_0-4\",\r\navg(CASE WHEN hm.metrica='Hombres_100 y más' THEN l.valor_metrica  END) \"Hombres_100 y más\",\r\navg(CASE WHEN hm.metrica='Hombres_10-14' THEN l.valor_metrica  END) \"Hombres_10-14\",\r\navg(CASE WHEN hm.metrica='Hombres_15-19' THEN l.valor_metrica  END) \"Hombres_15-19\",\r\navg(CASE WHEN hm.metrica='Hombres_20-24' THEN l.valor_metrica  END) \"Hombres_20-24\",\r\navg(CASE WHEN hm.metrica='Hombres_25-29' THEN l.valor_metrica  END) \"Hombres_25-29\",\r\navg(CASE WHEN hm.metrica='Hombres_30-34' THEN l.valor_metrica  END) \"Hombres_30-34\",\r\navg(CASE WHEN hm.metrica='Hombres_35-39' THEN l.valor_metrica  END) \"Hombres_35-39\",\r\navg(CASE WHEN hm.metrica='Hombres_40-44' THEN l.valor_metrica  END) \"Hombres_40-44\",\r\navg(CASE WHEN hm.metrica='Hombres_45-49' THEN l.valor_metrica  END) \"Hombres_45-49\",\r\navg(CASE WHEN hm.metrica='Hombres_50-54' THEN l.valor_metrica  END) \"Hombres_50-54\",\r\navg(CASE WHEN hm.metrica='Hombres_55-59' THEN l.valor_metrica  END) \"Hombres_55-59\",\r\navg(CASE WHEN hm.metrica='Hombres_5-9' THEN l.valor_metrica  END) \"Hombres_5-9\",\r\navg(CASE WHEN hm.metrica='Hombres_60-64' THEN l.valor_metrica  END) \"Hombres_60-64\",\r\navg(CASE WHEN hm.metrica='Hombres_65-69' THEN l.valor_metrica  END) \"Hombres_65-69\",\r\navg(CASE WHEN hm.metrica='Hombres_70-74' THEN l.valor_metrica  END) \"Hombres_70-74\",\r\navg(CASE WHEN hm.metrica='Hombres_75-79' THEN l.valor_metrica  END) \"Hombres_75-79\",\r\navg(CASE WHEN hm.metrica='Porcentaje de hogares unipersonales' THEN l.valor_metrica  END) \"Porcentaje de hogares unipersonales\",\r\navg(CASE WHEN hm.metrica='Porcentaje de población menor de 18 años' THEN l.valor_metrica  END) \"Porcentaje de población menor de 18 años\",\r\navg(CASE WHEN hm.metrica='Hombres_80-84' THEN l.valor_metrica  END) \"Hombres_80-84\",\r\navg(CASE WHEN hm.metrica='Hombres_85-89' THEN l.valor_metrica  END) \"Hombres_85-89\",\r\navg(CASE WHEN hm.metrica='Hombres_90-94' THEN l.valor_metrica  END) \"Hombres_90-94\",\r\navg(CASE WHEN hm.metrica='Hombres_95-99' THEN l.valor_metrica  END) \"Hombres_95-99\",\r\navg(CASE WHEN hm.metrica='Hombres_Total' THEN l.valor_metrica  END) \"Hombres_Total\",\r\navg(CASE WHEN hm.metrica='Mujeres_0-4' THEN l.valor_metrica  END) \"Mujeres_0-4\",\r\navg(CASE WHEN hm.metrica='Mujeres_100 y más' THEN l.valor_metrica  END) \"Mujeres_100 y más\",\r\navg(CASE WHEN hm.metrica='Mujeres_10-14' THEN l.valor_metrica  END) \"Mujeres_10-14\",\r\navg(CASE WHEN hm.metrica='Mujeres_15-19' THEN l.valor_metrica  END) \"Mujeres_15-19\",\r\navg(CASE WHEN hm.metrica='Mujeres_20-24' THEN l.valor_metrica  END) \"Mujeres_20-24\",\r\navg(CASE WHEN hm.metrica='Mujeres_25-29' THEN l.valor_metrica  END) \"Mujeres_25-29\",\r\navg(CASE WHEN hm.metrica='Mujeres_30-34' THEN l.valor_metrica  END) \"Mujeres_30-34\",\r\navg(CASE WHEN hm.metrica='Mujeres_35-39' THEN l.valor_metrica  END) \"Mujeres_35-39\",\r\navg(CASE WHEN hm.metrica='Mujeres_40-44' THEN l.valor_metrica  END) \"Mujeres_40-44\",\r\navg(CASE WHEN hm.metrica='Mujeres_45-49' THEN l.valor_metrica  END) \"Mujeres_45-49\",\r\navg(CASE WHEN hm.metrica='Mujeres_50-54' THEN l.valor_metrica  END) \"Mujeres_50-54\",\r\navg(CASE WHEN hm.metrica='Mujeres_55-59' THEN l.valor_metrica  END) \"Mujeres_55-59\",\r\navg(CASE WHEN hm.metrica='Mujeres_5-9' THEN l.valor_metrica  END) \"Mujeres_5-9\",\r\navg(CASE WHEN hm.metrica='Mujeres_60-64' THEN l.valor_metrica  END) \"Mujeres_60-64\",\r\navg(CASE WHEN hm.metrica='Mujeres_65-69' THEN l.valor_metrica  END) \"Mujeres_65-69\",\r\navg(CASE WHEN hm.metrica='Mujeres_70-74' THEN l.valor_metrica  END) \"Mujeres_70-74\",\r\navg(CASE WHEN hm.metrica='Mujeres_75-79' THEN l.valor_metrica  END) \"Mujeres_75-79\",\r\navg(CASE WHEN hm.metrica='Mujeres_80-84' THEN l.valor_metrica  END) \"Mujeres_80-84\",\r\navg(CASE WHEN hm.metrica='Mujeres_85-89' THEN l.valor_metrica  END) \"Mujeres_85-89\",\r\navg(CASE WHEN hm.metrica='Mujeres_90-94' THEN l.valor_metrica  END) \"Mujeres_90-94\",\r\navg(CASE WHEN hm.metrica='Mujeres_95-99' THEN l.valor_metrica  END) \"Mujeres_95-99\",\r\navg(CASE WHEN hm.metrica='Mujeres_Total' THEN l.valor_metrica  END) \"Mujeres_Total\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Perú' THEN l.valor_metrica  END) \"Ambos Sexos_Perú\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Total Oceanía' THEN l.valor_metrica  END) \"Ambos Sexos_Total Oceanía\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Total Resto de Europa' THEN l.valor_metrica  END) \"Ambos Sexos_Total Resto de Europa\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Total Unión Europea' THEN l.valor_metrica  END) \"Ambos Sexos_Total Unión Europea\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Venezuela' THEN l.valor_metrica  END) \"Ambos Sexos_Venezuela\",\r\navg(CASE WHEN hm.metrica='Población' THEN l.valor_metrica  END) \"Población\",\r\navg(CASE WHEN hm.metrica='Porcentaje de población española' THEN l.valor_metrica  END) \"Porcentaje de población española\",\r\navg(CASE WHEN hm.metrica='Hombres_Argelia' THEN l.valor_metrica  END) \"Hombres_Argelia\",\r\navg(CASE WHEN hm.metrica='Hombres_Total América' THEN l.valor_metrica  END) \"Hombres_Total América\",\r\navg(CASE WHEN hm.metrica='Mujeres_Francia' THEN l.valor_metrica  END) \"Mujeres_Francia\",\r\navg(CASE WHEN hm.metrica='Mujeres_Pakistán' THEN l.valor_metrica  END) \"Mujeres_Pakistán\",\r\navg(CASE WHEN hm.metrica='Mujeres_Portugal' THEN l.valor_metrica  END) \"Mujeres_Portugal\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Colombia' THEN l.valor_metrica  END) \"Ambos Sexos_Colombia\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Nacidos en España' THEN l.valor_metrica  END) \"Ambos Sexos_Nacidos en España\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Paraguay' THEN l.valor_metrica  END) \"Ambos Sexos_Paraguay\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Rusia' THEN l.valor_metrica  END) \"Ambos Sexos_Rusia\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Uruguay' THEN l.valor_metrica  END) \"Ambos Sexos_Uruguay\",\r\navg(CASE WHEN hm.metrica='Hombres_Bolivia' THEN l.valor_metrica  END) \"Hombres_Bolivia\",\r\navg(CASE WHEN hm.metrica='Hombres_Bulgaria' THEN l.valor_metrica  END) \"Hombres_Bulgaria\",\r\navg(CASE WHEN hm.metrica='Hombres_China' THEN l.valor_metrica  END) \"Hombres_China\",\r\navg(CASE WHEN hm.metrica='Hombres_Colombia' THEN l.valor_metrica  END) \"Hombres_Colombia\",\r\navg(CASE WHEN hm.metrica='Hombres_Marruecos' THEN l.valor_metrica  END) \"Hombres_Marruecos\",\r\navg(CASE WHEN hm.metrica='Hombres_Total Oceanía' THEN l.valor_metrica  END) \"Hombres_Total Oceanía\",\r\navg(CASE WHEN hm.metrica='Mujeres_Bolivia' THEN l.valor_metrica  END) \"Mujeres_Bolivia\",\r\navg(CASE WHEN hm.metrica='Mujeres_Ecuador' THEN l.valor_metrica  END) \"Mujeres_Ecuador\",\r\navg(CASE WHEN hm.metrica='Mujeres_Reino Unido' THEN l.valor_metrica  END) \"Mujeres_Reino Unido\",\r\navg(CASE WHEN hm.metrica='Mujeres_Senegal' THEN l.valor_metrica  END) \"Mujeres_Senegal\",\r\navg(CASE WHEN hm.metrica='Mujeres_Total Africa' THEN l.valor_metrica  END) \"Mujeres_Total Africa\",\r\navg(CASE WHEN hm.metrica='Mujeres_Uruguay' THEN l.valor_metrica  END) \"Mujeres_Uruguay\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Marruecos' THEN l.valor_metrica  END) \"Ambos Sexos_Marruecos\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Pakistán' THEN l.valor_metrica  END) \"Ambos Sexos_Pakistán\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Total Asia' THEN l.valor_metrica  END) \"Ambos Sexos_Total Asia\",\r\navg(CASE WHEN hm.metrica='Hombres_Brasil' THEN l.valor_metrica  END) \"Hombres_Brasil\",\r\navg(CASE WHEN hm.metrica='Hombres_Ecuador' THEN l.valor_metrica  END) \"Hombres_Ecuador\",\r\navg(CASE WHEN hm.metrica='Hombres_Nacidos en el Extranjero' THEN l.valor_metrica  END) \"Hombres_Nacidos en el Extranjero\",\r\navg(CASE WHEN hm.metrica='Hombres_Nigeria' THEN l.valor_metrica  END) \"Hombres_Nigeria\",\r\navg(CASE WHEN hm.metrica='Porcentaje de población de 65 y más años' THEN l.valor_metrica  END) \"Porcentaje de población de 65 y más años\",\r\navg(CASE WHEN hm.metrica='Hombres_Senegal' THEN l.valor_metrica  END) \"Hombres_Senegal\",\r\navg(CASE WHEN hm.metrica='Hombres_Total Africa' THEN l.valor_metrica  END) \"Hombres_Total Africa\",\r\navg(CASE WHEN hm.metrica='Hombres_Total Asia' THEN l.valor_metrica  END) \"Hombres_Total Asia\",\r\navg(CASE WHEN hm.metrica='Mujeres_Argelia' THEN l.valor_metrica  END) \"Mujeres_Argelia\",\r\navg(CASE WHEN hm.metrica='Mujeres_China' THEN l.valor_metrica  END) \"Mujeres_China\",\r\navg(CASE WHEN hm.metrica='Mujeres_Cuba' THEN l.valor_metrica  END) \"Mujeres_Cuba\",\r\navg(CASE WHEN hm.metrica='Mujeres_Marruecos' THEN l.valor_metrica  END) \"Mujeres_Marruecos\",\r\navg(CASE WHEN hm.metrica='Mujeres_Nacidos en España' THEN l.valor_metrica  END) \"Mujeres_Nacidos en España\",\r\navg(CASE WHEN hm.metrica='Mujeres_Nigeria' THEN l.valor_metrica  END) \"Mujeres_Nigeria\",\r\navg(CASE WHEN hm.metrica='Mujeres_Paraguay' THEN l.valor_metrica  END) \"Mujeres_Paraguay\",\r\navg(CASE WHEN hm.metrica='Mujeres_Ucrania' THEN l.valor_metrica  END) \"Mujeres_Ucrania\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Alemania' THEN l.valor_metrica  END) \"Ambos Sexos_Alemania\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Argelia' THEN l.valor_metrica  END) \"Ambos Sexos_Argelia\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Argentina' THEN l.valor_metrica  END) \"Ambos Sexos_Argentina\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Bolivia' THEN l.valor_metrica  END) \"Ambos Sexos_Bolivia\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Brasil' THEN l.valor_metrica  END) \"Ambos Sexos_Brasil\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_China' THEN l.valor_metrica  END) \"Ambos Sexos_China\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Portugal' THEN l.valor_metrica  END) \"Ambos Sexos_Portugal\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Reino Unido' THEN l.valor_metrica  END) \"Ambos Sexos_Reino Unido\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Total Población' THEN l.valor_metrica  END) \"Ambos Sexos_Total Población\",\r\navg(CASE WHEN hm.metrica='Hombres_Italia' THEN l.valor_metrica  END) \"Hombres_Italia\",\r\navg(CASE WHEN hm.metrica='Hombres_Pakistán' THEN l.valor_metrica  END) \"Hombres_Pakistán\",\r\navg(CASE WHEN hm.metrica='Hombres_Polonia' THEN l.valor_metrica  END) \"Hombres_Polonia\",\r\navg(CASE WHEN hm.metrica='Hombres_Reino Unido' THEN l.valor_metrica  END) \"Hombres_Reino Unido\",\r\navg(CASE WHEN hm.metrica='Hombres_República Dominicana' THEN l.valor_metrica  END) \"Hombres_República Dominicana\",\r\navg(CASE WHEN hm.metrica='Hombres_Rumanía' THEN l.valor_metrica  END) \"Hombres_Rumanía\",\r\navg(CASE WHEN hm.metrica='Hombres_Total Población' THEN l.valor_metrica  END) \"Hombres_Total Población\",\r\navg(CASE WHEN hm.metrica='Mujeres_Chile' THEN l.valor_metrica  END) \"Mujeres_Chile\",\r\navg(CASE WHEN hm.metrica='Mujeres_Colombia' THEN l.valor_metrica  END) \"Mujeres_Colombia\",\r\navg(CASE WHEN hm.metrica='Mujeres_Italia' THEN l.valor_metrica  END) \"Mujeres_Italia\",\r\navg(CASE WHEN hm.metrica='Mujeres_Nacidos en el Extranjero' THEN l.valor_metrica  END) \"Mujeres_Nacidos en el Extranjero\",\r\navg(CASE WHEN hm.metrica='Mujeres_Perú' THEN l.valor_metrica  END) \"Mujeres_Perú\",\r\navg(CASE WHEN hm.metrica='Mujeres_Polonia' THEN l.valor_metrica  END) \"Mujeres_Polonia\",\r\navg(CASE WHEN hm.metrica='Mujeres_Total Asia' THEN l.valor_metrica  END) \"Mujeres_Total Asia\",\r\navg(CASE WHEN hm.metrica='Mujeres_Total Europa No Comunitaria' THEN l.valor_metrica  END) \"Mujeres_Total Europa No Comunitaria\",\r\navg(CASE WHEN hm.metrica='Mujeres_Total Población' THEN l.valor_metrica  END) \"Mujeres_Total Población\",\r\navg(CASE WHEN hm.metrica='Mujeres_Venezuela' THEN l.valor_metrica  END) \"Mujeres_Venezuela\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Cuba' THEN l.valor_metrica  END) \"Ambos Sexos_Cuba\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Francia' THEN l.valor_metrica  END) \"Ambos Sexos_Francia\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Nigeria' THEN l.valor_metrica  END) \"Ambos Sexos_Nigeria\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_República Dominicana' THEN l.valor_metrica  END) \"Ambos Sexos_República Dominicana\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Senegal' THEN l.valor_metrica  END) \"Ambos Sexos_Senegal\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Total Africa' THEN l.valor_metrica  END) \"Ambos Sexos_Total Africa\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Total África' THEN l.valor_metrica  END) \"Ambos Sexos_Total África\",\r\navg(CASE WHEN hm.metrica='Hombres_Alemania' THEN l.valor_metrica  END) \"Hombres_Alemania\",\r\navg(CASE WHEN hm.metrica='Hombres_Cuba' THEN l.valor_metrica  END) \"Hombres_Cuba\",\r\navg(CASE WHEN hm.metrica='Hombres_Nacidos en España' THEN l.valor_metrica  END) \"Hombres_Nacidos en España\",\r\navg(CASE WHEN hm.metrica='Hombres_Paraguay' THEN l.valor_metrica  END) \"Hombres_Paraguay\",\r\navg(CASE WHEN hm.metrica='Hombres_Portugal' THEN l.valor_metrica  END) \"Hombres_Portugal\",\r\navg(CASE WHEN hm.metrica='Hombres_Rusia' THEN l.valor_metrica  END) \"Hombres_Rusia\",\r\navg(CASE WHEN hm.metrica='Hombres_Total Resto de Europa' THEN l.valor_metrica  END) \"Hombres_Total Resto de Europa\",\r\navg(CASE WHEN hm.metrica='Hombres_Total Unión Europea' THEN l.valor_metrica  END) \"Hombres_Total Unión Europea\",\r\navg(CASE WHEN hm.metrica='Hombres_Ucrania' THEN l.valor_metrica  END) \"Hombres_Ucrania\",\r\navg(CASE WHEN hm.metrica='Hombres_Uruguay' THEN l.valor_metrica  END) \"Hombres_Uruguay\",\r\navg(CASE WHEN hm.metrica='Hombres_Venezuela' THEN l.valor_metrica  END) \"Hombres_Venezuela\",\r\navg(CASE WHEN hm.metrica='Mujeres_Brasil' THEN l.valor_metrica  END) \"Mujeres_Brasil\",\r\navg(CASE WHEN hm.metrica='Mujeres_Rumanía' THEN l.valor_metrica  END) \"Mujeres_Rumanía\",\r\navg(CASE WHEN hm.metrica='Mujeres_Rusia' THEN l.valor_metrica  END) \"Mujeres_Rusia\",\r\navg(CASE WHEN hm.metrica='Mujeres_Total África' THEN l.valor_metrica  END) \"Mujeres_Total África\",\r\navg(CASE WHEN hm.metrica='Mujeres_Total Resto de Europa' THEN l.valor_metrica  END) \"Mujeres_Total Resto de Europa\",\r\navg(CASE WHEN hm.metrica='Mujeres_Total Unión Europea' THEN l.valor_metrica  END) \"Mujeres_Total Unión Europea\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Bulgaria' THEN l.valor_metrica  END) \"Ambos Sexos_Bulgaria\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Chile' THEN l.valor_metrica  END) \"Ambos Sexos_Chile\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Ecuador' THEN l.valor_metrica  END) \"Ambos Sexos_Ecuador\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Italia' THEN l.valor_metrica  END) \"Ambos Sexos_Italia\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Nacidos en el Extranjero' THEN l.valor_metrica  END) \"Ambos Sexos_Nacidos en el Extranjero\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Polonia' THEN l.valor_metrica  END) \"Ambos Sexos_Polonia\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Rumanía' THEN l.valor_metrica  END) \"Ambos Sexos_Rumanía\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Total América' THEN l.valor_metrica  END) \"Ambos Sexos_Total América\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Total Europa No Comunitaria' THEN l.valor_metrica  END) \"Ambos Sexos_Total Europa No Comunitaria\",\r\navg(CASE WHEN hm.metrica='Ambos Sexos_Ucrania' THEN l.valor_metrica  END) \"Ambos Sexos_Ucrania\",\r\navg(CASE WHEN hm.metrica='Hombres_Argentina' THEN l.valor_metrica  END) \"Hombres_Argentina\",\r\navg(CASE WHEN hm.metrica='Hombres_Chile' THEN l.valor_metrica  END) \"Hombres_Chile\",\r\navg(CASE WHEN hm.metrica='Hombres_Francia' THEN l.valor_metrica  END) \"Hombres_Francia\",\r\navg(CASE WHEN hm.metrica='Hombres_Perú' THEN l.valor_metrica  END) \"Hombres_Perú\",\r\navg(CASE WHEN hm.metrica='Hombres_Total Europa No Comunitaria' THEN l.valor_metrica  END) \"Hombres_Total Europa No Comunitaria\",\r\navg(CASE WHEN hm.metrica='Mujeres_Alemania' THEN l.valor_metrica  END) \"Mujeres_Alemania\",\r\navg(CASE WHEN hm.metrica='Mujeres_Argentina' THEN l.valor_metrica  END) \"Mujeres_Argentina\",\r\navg(CASE WHEN hm.metrica='Mujeres_Bulgaria' THEN l.valor_metrica  END) \"Mujeres_Bulgaria\",\r\navg(CASE WHEN hm.metrica='Mujeres_República Dominicana' THEN l.valor_metrica  END) \"Mujeres_República Dominicana\",\r\navg(CASE WHEN hm.metrica='Mujeres_Total América' THEN l.valor_metrica  END) \"Mujeres_Total América\",\r\navg(CASE WHEN hm.metrica='Mujeres_Total Oceanía' THEN l.valor_metrica  END) \"Mujeres_Total Oceanía\"\r\n--INTO open_data.geo_area.datos_secciones_historico\r\nFROM open_data.INE.LINK_DATOS_NIVEL_SECCION_METRICA_ANNO l\r\njoin INE.HUB_METRICA hm on hm.metrica_KEY = l.metrica_KEY\r\njoin INE.HUB_SECCIONES hs on hs.Secciones_KEY = l.Secciones_KEY \r\ngroup by hs.Cod_Secciones ,l.anno;\r\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table geo_area.datos_secciones_historico",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "geo_area",
									"tabla": "datos_secciones_historico"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "4 DWH- DM"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-02T09:47:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/5 AEMET OBSERVACION_DIARIA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "1 AEMET OBSERVACION_DIARIA",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "1 AEMET OBSERVACION_HORARIA",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "2 AEMET OBSERVACION_DIARIA DWH",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "1 AEMET OBSERVACION_DIARIA",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "2 AEMET OBSERVACION_HORARIA",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "5 Procesos Completos"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-14T16:52:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/1 AEMET OBSERVACION_HORARIA')]",
				"[concat(variables('factoryId'), '/pipelines/2 AEMET OBSERVACION_HORARIA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/5 AEMET OBSERVACION_HISTORICA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "peticion_url_obserbaciones",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"api_key": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyaWNhcmRvLmNhbWFjaG9Abm92YXF1YWxpdHkuZXMiLCJqdGkiOiIxMjljNWQzYS1jZWFlLTQ5ZWYtODQ2OS05ZmJjZjY5YzIyMTUiLCJpc3MiOiJBRU1FVCIsImlhdCI6MTY2OTE4NjA4NywidXNlcklkIjoiMTI5YzVkM2EtY2VhZS00OWVmLTg0NjktOWZiY2Y2OWMyMjE1Iiwicm9sZSI6IiJ9.xtPVH8hEwLGRCmyL8Xccv7s2bNVB-wbVL7XSOP1VipM",
								"cache-control": "no-cache"
							},
							"url": "https://opendata.aemet.es/opendata/api/valores/climatologicos/diarios/datos/fechaini/2023-03-01T00:00:00UTC/fechafin/2023-03-13T23:59:59UTC/todasestaciones"
						}
					},
					{
						"name": "copia_observacion_diaria",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "peticion_url_obserbaciones",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "LOAD_DATE",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									{
										"name": "REC_SRC",
										"value": "'https://opendata.aemet.es/opendata/api/observacion/convencional/todas'"
									}
								],
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "scr_aemet",
								"type": "DatasetReference",
								"parameters": {
									"url_datos_aemet": {
										"value": "@activity('peticion_url_obserbaciones').output.datos",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "STG",
									"tabla": "AEMET_OBSERVACION_ESTACION_DIA"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "5 Procesos Completos"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-11T08:14:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/scr_aemet')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/5 AEMET PREDICCION_DIARIA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "1 AEMET PREDICCION_DIARIA",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "1 AEMET PREDICCION_DIARIA",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "2 AEMET PREDICCION_DIARIA",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "1 AEMET PREDICCION_DIARIA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "2 AEMET PREDICCION_DIARIA",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "5 Procesos Completos"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-14T16:52:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/1 AEMET PREDICCION_DIARIA')]",
				"[concat(variables('factoryId'), '/pipelines/2 AEMET PREDICCION_DIARIA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/5 PROYECTO_FARMAS_CADENAS_SEMANALES')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "2 Carga datos Sanidad",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "2 Carga datos Sanidad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "2 Carga datos pois",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "2 Carga datos Sanidad",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "2 Carga datos pois",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "2 Rutas Sanitarias",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "2 Carga datos pois",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "2 Rutas Sanitarias",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "2 Zonas_influencia FARMAS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "2 Carga datos pois",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "2 Zonas_influencia FARMAS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "3 datos farms a DWH",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "2 Carga datos Sanidad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "3 datos farms a DWH",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "3 calculos entrena farmas",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "2 Zonas_influencia FARMAS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "4 calculos entrena farmas",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "5 Procesos Completos"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-31T15:38:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/2 Carga datos Sanidad')]",
				"[concat(variables('factoryId'), '/pipelines/2 Carga datos pois')]",
				"[concat(variables('factoryId'), '/pipelines/2 Rutas Sanitarias')]",
				"[concat(variables('factoryId'), '/pipelines/2 Zonas_influencia FARMAS')]",
				"[concat(variables('factoryId'), '/pipelines/3 datos farms a DWH')]",
				"[concat(variables('factoryId'), '/pipelines/4 calculos entrena farmas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/5 recrea ine')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "3 DATOS INE_DEMOGRAFICOS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "2 INE DATOS_ESTADISTICA_ESPERIMENTAL",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "3 DATOS INE_DEMOGRAFICOS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "3 DATOS INE_FUENTES_RENTA",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "3 DATOS INE_DEMOGRAFICOS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "3 DATOS INE_FUENTES_RENTA",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "3 DATOS INE_PADRON_EDAD_SEXO",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "3 DATOS INE_FUENTES_RENTA",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "3 DATOS INE_PADRON_EDAD_SEXO",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "3 DATOS INE_RENTAS_MEDIAS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "3 DATOS INE_UMBRALES_MAX_MIN",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "3 DATOS INE_RENTAS_MEDIAS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "3 DATOS INE_UMBRALES_MAX_MIN",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "3 DATOS INE_UMBRALES_RENTA",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "3 DATOS INE_UMBRALES_MAX_MIN",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "3 DATOS INE_UMBRALES_RENTA",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "3 DATOS INE_PADRON_EDAD_SEXO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "3 DATOS INE_UMBRALES_RENTA",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "4 carga datos seccion historicos",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "3 DATOS INE_RENTAS_MEDIAS",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "4 carga datos seccion historicos",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "2 INE DATOS_ESTADISTICA_ESPERIMENTAL",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "2 INE DATOS_ESTADISTICA_ESPERIMENTAL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "5 Procesos Completos"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-01T18:12:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/3 DATOS INE_DEMOGRAFICOS')]",
				"[concat(variables('factoryId'), '/pipelines/3 DATOS INE_FUENTES_RENTA')]",
				"[concat(variables('factoryId'), '/pipelines/3 DATOS INE_PADRON_EDAD_SEXO')]",
				"[concat(variables('factoryId'), '/pipelines/3 DATOS INE_RENTAS_MEDIAS')]",
				"[concat(variables('factoryId'), '/pipelines/3 DATOS INE_UMBRALES_MAX_MIN')]",
				"[concat(variables('factoryId'), '/pipelines/3 DATOS INE_UMBRALES_RENTA')]",
				"[concat(variables('factoryId'), '/pipelines/4 carga datos seccion historicos')]",
				"[concat(variables('factoryId'), '/pipelines/2 INE DATOS_ESTADISTICA_ESPERIMENTAL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/99 AEMET OBSERACIONES_HISTORICAS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Azure Function1",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "predicciones",
							"headers": {
								"name": "historico"
							},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "AFAemet",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Azure Function1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AvroSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Avro1",
								"type": "DatasetReference",
								"parameters": {
									"directorio": "historicos",
									"fichero": "historicos"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "STG",
									"tabla": "AEMET_HISTORICOS"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "99 Procesos puntuales"
				},
				"annotations": [],
				"lastPublishTime": "2024-04-10T11:21:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AFAemet')]",
				"[concat(variables('factoryId'), '/datasets/Avro1')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/99 AEMET OBSERVACION_DIARIA_ESTACIONES')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para descarga puntual de observaciones dirarias. Las fechas en formato YYYY-MM-DD y una ventana de no mas de 30 días.",
				"activities": [
					{
						"name": "peticion_url_obserbaciones",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Fecha Inicio",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Fecha Fin",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"api_key": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyaWNhcmRvLmNhbWFjaG9Abm92YXF1YWxpdHkuZXMiLCJqdGkiOiIxMjljNWQzYS1jZWFlLTQ5ZWYtODQ2OS05ZmJjZjY5YzIyMTUiLCJpc3MiOiJBRU1FVCIsImlhdCI6MTY2OTE4NjA4NywidXNlcklkIjoiMTI5YzVkM2EtY2VhZS00OWVmLTg0NjktOWZiY2Y2OWMyMjE1Iiwicm9sZSI6IiJ9.xtPVH8hEwLGRCmyL8Xccv7s2bNVB-wbVL7XSOP1VipM",
								"cache-control": "no-cache"
							},
							"url": {
								"value": "@concat('https://opendata.aemet.es/opendata/api/valores/climatologicos/diarios/datos/fechaini/',variables('fec_ini_var'),'/fechafin/',variables('fec_fin_var'),'/todasestaciones')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "copia_observacion_diaria",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "peticion_url_obserbaciones",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "LOAD_DATE",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									},
									{
										"name": "REC_SRC",
										"value": "'https://opendata.aemet.es/opendata/api/observacion/convencional/todas'"
									}
								],
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "scr_aemet",
								"type": "DatasetReference",
								"parameters": {
									"url_datos_aemet": {
										"value": "@activity('peticion_url_obserbaciones').output.datos",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "STG",
									"tabla": "AEMET_OBSERVACION_ESTACION_DIA"
								}
							}
						]
					},
					{
						"name": "Fecha Inicio",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "fec_ini_var",
							"value": {
								"value": "@concat(pipeline().parameters.fec_ini,'T00:00:00UTC')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Fecha Fin",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "fec_fin_var",
							"value": {
								"value": "@concat(pipeline().parameters.fec_fin,'T23:59:59UTC')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"fec_ini": {
						"type": "string"
					},
					"fec_fin": {
						"type": "string"
					}
				},
				"variables": {
					"fec_ini_var": {
						"type": "String"
					},
					"fec_fin_var": {
						"type": "String"
					}
				},
				"folder": {
					"name": "99 Procesos puntuales"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-11T08:27:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/scr_aemet')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/99 borrar duplicados')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "borrar duplicados",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "WITH CTE AS (\n    SELECT *,\n           ROW_NUMBER() OVER(PARTITION BY {pipeline().parameters.campos} ORDER BY (SELECT NULL)) AS rn\n    FROM {pipeline().parameters.tabla}\n)\nDELETE FROM CTE WHERE rn > 1;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tabla": {
						"type": "string"
					},
					"campos": {
						"type": "string"
					}
				},
				"folder": {
					"name": "99 Procesos puntuales"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-15T11:28:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/farma')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/99 traspaso calculos_catastro_app')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table calculos_app.catastro_app;\nCREATE TABLE \ncalculos_app.catastro_app (\n\tcod_agr_portales nvarchar(44) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n\tref_cat_finca nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n\tseccioncensal nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n\tusos nvarchar(MAX) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n\tcod_provin nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n\tcod_munici_ine nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n\tnum_viviendas float NULL,\n\tsuperf_media_viviendas float NULL,\n\tsuperf_min_viviendas float NULL,\n\tsuperf_max_viviendas float NULL,\n\taltura_plantas_viviendas float NULL,\n\ttotal_plantas_viviendas float NULL,\n\tantiguedad_viviendas float NULL,\n\tnum_inmuebles float NULL,\n\tsuperf_media_inmuebles float NULL,\n\tsuperf_min_inmuebles float NULL,\n\tsuperf_max_inmuebles float NULL,\n\taltura_plantas_inmuebles float NULL,\n\ttotal_plantas_inmuebles float NULL,\n\tantiguedad_inmuebles float NULL,\n\tnum_comercios float NULL,\n\tnum_oficinas float NULL,\n\tsuperf_media_oficinas float NULL,\n\tsuperf_min_oficinas float NULL,\n\tsuperf_max_oficinas float NULL,\n\tsuperf_media_comercios float NULL,\n\tsuperf_min_comercios float NULL,\n\tsuperf_max_comercios float NULL,\n\tgeo_gps_y_latitud float NOT NULL,\n\tgeo_gps_x_longitud float NOT NULL,\n\tgeo_coordenadas geography NULL,\n\tCONSTRAINT PK_cod_agr_portales PRIMARY KEY (cod_agr_portales)\n);",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "calculos_app",
									"tabla": "catastro_app"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "calculos_app",
									"tabla": "catastro_app",
									"bbdd": "farma"
								}
							}
						]
					},
					{
						"name": "Copy data1_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Script1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "calculos_app",
									"tabla": "datos_ine_con_viviendas"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "calculos_app",
									"tabla": "datos_ine_con_viviendas",
									"bbdd": "farma"
								}
							}
						]
					},
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference",
							"parameters": {
								"bbdd": "farma"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "CREATE NONCLUSTERED INDEX catastro_app_geo_gps_y_latitud_IDX ON calculos_app.catastro_app (  geo_gps_y_latitud ASC  , geo_gps_x_longitud ASC  )  \n\t WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )\n\t ON [PRIMARY ] ;\n CREATE NONCLUSTERED INDEX catastro_app_seccioncensal_IDX ON calculos_app.catastro_app (  seccioncensal ASC  )  \n\t WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )\n\t ON [PRIMARY ] ;\nCREATE INDEX idx_geoespacial ON calculos_app.catastro_app (geo_coordenadas);"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "99 Procesos puntuales"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-17T17:38:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]",
				"[concat(variables('factoryId'), '/datasets/farma')]",
				"[concat(variables('factoryId'), '/linkedServices/farma')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CREA DATOS_COORDENADAS_SECCION')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DATOS ratio_segunda_vivienda",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "indexa tabla particiones",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "\r\n\r\nSELECT f.anno, c.seccioncensal,\r\n    CASE WHEN SUM(CAST(c.num_viviendas AS DECIMAL)) = 0 THEN 0\r\n         ELSE ROUND((SUM(CAST(c.num_viviendas AS DECIMAL)) - avg(f.familias)) / NULLIF(SUM(CAST(c.num_viviendas AS DECIMAL)), 0), 3)\r\n    END AS Por_Segun_vivienda\r\nFROM geo_area.tb_catastro_portales_nueva c\r\nINNER JOIN (\r\n    SELECT *, ROUND(poblacion / NULLIF(tamaño_medio_hogar, 0), 3) AS familias\r\n    FROM geo_area.datos_integracion_sc\r\n    WHERE tamaño_medio_hogar IS NOT NULL AND tamaño_medio_hogar <> 0\r\n    ) f ON c.seccioncensal = f.seccioncensal and f.anno > cast(replace(c.antiguedad_viviendas,',','.') as int)\r\nGROUP BY f.anno, c.seccioncensal;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table geo_area.ratio_segunda_vivienda;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "geo_area",
									"tabla": "ratio_segunda_vivienda"
								}
							}
						]
					},
					{
						"name": "DATOS tb_catastro_poblacion",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT cod_agr_portales, ref_cat_finca, c.seccioncensal, d.anno,\r\nCAST(SUBSTRING(c.seccioncensal,1,5) as int) as cod_sc_provin_municipio,\r\n    ROUND(CAST(REPLACE(geo_gps_y_latitud,',','.') as float),5) as latitud,\r\n    ROUND(CAST(REPLACE(geo_gps_x_longitud,',','.') as float),5) as longitud,\r\n    ROUND(CAST(REPLACE(geo_gps_y_latitud,',','.') as float),2) as lat_short,\r\n    ROUND(CAST(REPLACE(geo_gps_x_longitud,',','.') as float),2) as long_short,\r\nnum_viviendas, superf_media_viviendas, superf_min_viviendas, superf_max_viviendas, altura_plantas_viviendas, total_plantas_viviendas, antiguedad_viviendas, num_inmuebles, superf_media_inmuebles, superf_min_inmuebles, superf_max_inmuebles, altura_plantas_inmuebles, total_plantas_inmuebles, antiguedad_inmuebles, cultivos, num_comercios, num_oficinas, superf_media_oficinas, superf_min_oficinas, superf_max_oficinas, superf_media_comercios, superf_min_comercios, superf_max_comercios, geo_gps_y_latitud, geo_gps_x_longitud, geo_gps_y_x, num_gps_y_latitud, num_gps_x_longitud, zonacatastral, cod_zona_concent, f_datos_catastrales, f_proceso_actualizacion\r\n, tamaño_medio_hogar, renta_media_uc, renta_mediana_uc, \r\nrenta_bruta_media_hogar, renta_bruta_media_persona, renta_neta_media_hogar, \r\nrenta_neta_media_persona, fuente_ingreso_otras_pres, fuente_ingreso_otros_ing,\r\nfuente_ingreso_pension, fuente_ingreso_desempleo, fuente_ingreso_salario, \r\npor_poblacion_renta_menor_10000, por_poblacion_renta_menor_5000, por_poblacion_renta_menor_7500,\r\npor_poblacion_renta_mediana_menor_40, por_poblacion_renta_mediana_menor_50, por_poblacion_renta_mediana_menor_60,\r\npor_poblacion_renta_mediana_mayor_140, por_poblacion_renta_mediana_mayor_160, por_poblacion_renta_mediana_mayor_200,\r\nedad_media_poblacion, por_hogares_unipersonales, por_menor_18, poblacion, por_poblacion_espanola, por_mayor_65,\r\n    (1 - s.por_segun_vivienda) * c.num_viviendas * d.tamaño_medio_hogar  AS poblacion_viviendas,\r\n    (1 - s.por_segun_vivienda) * c.num_viviendas  as total_familias_viviendas,\r\n    s.por_segun_vivienda\r\n    from geo_area.tb_catastro_portales_nueva c\r\nleft join geo_area.datos_integracion_sc d on (c.seccioncensal = d.seccioncensal)\r\nleft join geo_area.ratio_segunda_vivienda s on (c.seccioncensal = s.seccioncensal)\r\nand d.anno = s.anno\r\nwhere d.anno >  cast(replace(c.antiguedad_viviendas,',','.') as int)\r\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "geo_area",
									"tabla": "catastro_integrado_ine"
								}
							}
						]
					},
					{
						"name": "indexa tabla particiones",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DATOS tb_catastro_poblacion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "DWH_open_data",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "CREATE INDEX idx_anno ON open_data.geo_area.catastro_integrado_ine (anno);\r\nCREATE INDEX idx_lat_short ON open_data.geo_area.catastro_integrado_ine (lat_short);\r\nCREATE INDEX idx_long_short ON open_data.geo_area.catastro_integrado_ine (long_short);"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "99 Procesos puntuales"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-23T17:21:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]",
				"[concat(variables('factoryId'), '/linkedServices/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Prediccion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Azure Function1",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "predicciones",
							"headers": {
								"name": "municipios"
							},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "AFAemet",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 Source to Data_Lake"
				},
				"annotations": [],
				"lastPublishTime": "2024-04-10T11:21:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AFAemet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/actualiza zonas_influencias')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "data_lake_to_farma_parquet",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "data_lake_to_farma_parquet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"contenedor": "salud",
								"directorio": "direcciones/zonas_influencia",
								"esquema": "staging",
								"tabla": "zonas_influencia_linial"
							}
						}
					},
					{
						"name": "carga_ficharo_zonas_rutas",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "data_lake_to_farma_parquet",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "data_lake_to_farma_parquet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"contenedor": "salud",
								"directorio": "direcciones/zonas_rutas",
								"esquema": "staging",
								"tabla": "zonas_influencia_rutas"
							}
						}
					},
					{
						"name": "carga_data_vault",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "carga_ficharo_zonas_rutas",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference",
							"parameters": {
								"bbdd": "farma"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "\r\ninsert into MAESTROS.LINK_PUNTO_ZONA \r\nselect DISTINCT  key_link_punto_zona, cod_punto, hash_farmacia_cercana, TRY_CONVERT(DATE,LOAD_DTS) LOAD_DTS\r\n--into MAESTROS.LINK_PUNTO_ZONA\r\nfrom staging.zonas_influencia_rutas_hd f\r\nwhere not EXISTS (select 1 from MAESTROS.LINK_PUNTO_ZONA l where  l.key_link_punto_zona= f.key_link_punto_zona)\r\n;\r\n\r\ninsert into MAESTROS.SAT_PUNTO_ZONA\r\nselect DISTINCT  key_link_punto_zona,distancia_ruta, calles_ruta ,hash_diff_link_punto_zona, TRY_CONVERT(DATE,LOAD_DTS) EFFECTIVE_DATETIME,\r\nCAST(NULL AS DATE) EXPIRY_DATETIME,\r\n'zonas_influencia_rutas_hd' ETL_PROCESS_ID,\r\n'S' ACTIVE_RECORD_INDICATOR\r\n--into MAESTROS.SAT_PUNTO_ZONA\r\nfrom staging.zonas_influencia_rutas_hd f\r\nwhere not EXISTS (select 1 from MAESTROS.SAT_PUNTO_ZONA l where  l.key_link_punto_zona= f.key_link_punto_zona AND l.hash_diff_link_punto_zona = f.hash_diff_link_punto_zona)\r\n;\r\n\r\n\r\nWITH CTE AS (\r\n    SELECT\r\n        key_link_punto_zona,\r\n        EFFECTIVE_DATETIME,\r\n        EXPIRY_DATETIME,\r\n        ACTIVE_RECORD_INDICATOR,\r\n        ROW_NUMBER() OVER (PARTITION BY key_link_punto_zona ORDER BY EFFECTIVE_DATETIME DESC, (CASE WHEN EXPIRY_DATETIME IS NULL THEN 1 ELSE 0 END) DESC) AS rn,\r\n        MAX(EFFECTIVE_DATETIME) OVER (PARTITION BY key_link_punto_zona) AS MaxEffectiveDate\r\n    FROM\r\n        MAESTROS.SAT_PUNTO_ZONA\r\n    WHERE\r\n        EXPIRY_DATETIME IS NULL\r\n)\r\nUPDATE CTE\r\nSET\r\n    EXPIRY_DATETIME = (CASE WHEN rn = 1 THEN EXPIRY_DATETIME ELSE MaxEffectiveDate END),\r\n    ACTIVE_RECORD_INDICATOR = (CASE WHEN rn = 1 THEN 'S' ELSE 'N' END)\r\nWHERE\r\n    rn > 1 OR (rn = 1 AND ACTIVE_RECORD_INDICATOR <> 'S');"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "actualiza calculo_zonas_rutas",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "carga_data_vault",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference",
							"parameters": {
								"bbdd": "farma"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "--crea copia temporal zonas_influencia_ruta \r\nselect cast(lpz.cod_punto  as varchar(100)) cod_punto, cast(lpz.hash_farmacia_cercana as varchar(100)) hash_farmacia_cercana , spz.distancia_ruta ,  \r\nROW_NUMBER() OVER(PARTITION BY cod_punto  ORDER BY spz.distancia_ruta ASC  ) AS posicion\r\ninto calculos.zonas_influencia_ruta_calculo_temp \r\nfrom MAESTROS.LINK_PUNTO_ZONA lpz \r\njoin MAESTROS.SAT_PUNTO_ZONA spz on spz.key_link_punto_zona = lpz.key_link_punto_zona \r\n\r\n-- inserta los registros que aun no tenemos con rutas de las zonas lineales \r\ninsert into calculos.zonas_influencia_ruta_calculo_temp\r\nselect cod_punto , hash_farmacia_cercana1 hash_farmacia_cercana , distancia_farmacia_cercana1 distancia_ruta, 1 posicion  \r\nfrom farma.calculos.zonas_influencia_calculo z\r\nwhere not EXISTS (select 1 from calculos.zonas_influencia_ruta_calculo_temp zr where zr.cod_punto = z.cod_punto)\r\n\r\ninsert into calculos.zonas_influencia_ruta_calculo_temp\r\nselect cod_punto , hash_farmacia_cercana2 hash_farmacia_cercana , distancia_farmacia_cercana2 distancia_ruta, 2 posicion  \r\nfrom farma.calculos.zonas_influencia_calculo z\r\nwhere not EXISTS (select 1 from calculos.zonas_influencia_ruta_calculo_temp zr where zr.cod_punto = z.cod_punto)\r\n\r\nDROP TABLE IF EXISTS calculos.zonas_influencia_ruta_calculo \r\n\r\nEXEC farma.sys.sp_rename N'farma.calculos.zonas_influencia_ruta_calculo_temp', N'zonas_influencia_ruta_calculo', 'OBJECT';\r\n\r\nCREATE INDEX zona_idx_cod_punto ON calculos.zonas_influencia_ruta_calculo(cod_punto);\r\nCREATE INDEX zona_idx_hash_farmacia_cercana1 ON calculos.zonas_influencia_ruta_calculo(hash_farmacia_cercana);\r\n\r\n\r\nSELECT cast(cod_punto as varchar(100)) cod_punto, Lat, lng, \r\n       cast(hash_farmacia_cercana1 as varchar(100)) hash_farmacia_cercana1, distancia_farmacia_cercana1, \r\n       cast(hash_farmacia_cercana2 as varchar(100)) hash_farmacia_cercana2, distancia_farmacia_cercana2, \r\n       cast(hash_farmacia_cercana3 as varchar(100)) hash_farmacia_cercana3, distancia_farmacia_cercana3\r\nINTO calculos.farma_calculos_temp\r\nFROM farma.calculos.zonas_influencia_calculo_hd;\r\n\r\n-- Borrar la tabla antigua\r\nDROP TABLE IF EXISTS calculos.zonas_influencia_calculo_hd_tabla;\r\n\r\n-- Cambiar el nombre de la tabla temporal al definitivo\r\nEXEC farma.sys.sp_rename N'farma.calculos.farma_calculos_temp', N'zonas_influencia_calculo_hd_tabla', 'OBJECT';\r\n\r\n\r\n-- Crear índices en la nueva tabla\r\nCREATE INDEX idx_cod_punto ON calculos.zonas_influencia_calculo_hd_tabla(cod_punto);\r\nCREATE INDEX idx_hash_farmacia_cercana1 ON calculos.zonas_influencia_calculo_hd_tabla(hash_farmacia_cercana1);\r\nCREATE INDEX idx_hash_farmacia_cercana2 ON calculos.zonas_influencia_calculo_hd_tabla(hash_farmacia_cercana2);\r\nCREATE INDEX idx_hash_farmacia_cercana3 ON calculos.zonas_influencia_calculo_hd_tabla(hash_farmacia_cercana3);\r\n\r\n\r\n\r\n\r\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "4 DWH- DM"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-18T10:40:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/data_lake_to_farma_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/farma')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bbdd_to_data_lake_parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": {
										"value": "@pipeline().parameters.esquema",
										"type": "Expression"
									},
									"tabla": {
										"value": "@pipeline().parameters.tabla",
										"type": "Expression"
									},
									"bbdd": {
										"value": "@pipeline().parameters.bbdd",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "archivos_parquet",
								"type": "DatasetReference",
								"parameters": {
									"contenedor": {
										"value": "@pipeline().parameters.contenedor",
										"type": "Expression"
									},
									"directorio": {
										"value": "@pipeline().parameters.directorio",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"contenedor": {
						"type": "string",
						"defaultValue": "salud"
					},
					"directorio": {
						"type": "string",
						"defaultValue": "direcciones/zonas_influencia"
					},
					"esquema": {
						"type": "string",
						"defaultValue": "staging"
					},
					"tabla": {
						"type": "string",
						"defaultValue": "zonas_influencia"
					},
					"bbdd": {
						"type": "string",
						"defaultValue": "farma"
					}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2024-01-31T13:32:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/farma')]",
				"[concat(variables('factoryId'), '/datasets/archivos_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/calculo popularidad satisfaccion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "carga_calculo_popularidad_satisfaccion",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference",
							"parameters": {
								"bbdd": "farma"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "\nWITH ResenasPorSemana AS (\n    SELECT \n        l.place_id,\n        DATEADD(day, -DATEPART(weekday, TRY_CONVERT(date, l.date_review)), TRY_CONVERT(date, l.date_review)) AS semana,\n        COUNT(*) AS num_resenas_semana,\n        count(review) as num_comentarios,\n        count(response) as num_respuestas,        \n        SUM(CASE s.rating WHEN '5.0' THEN 1 ELSE 0 END) AS num_resenas_5,\n        SUM(CASE s.rating WHEN '4.0' THEN 1 ELSE 0 END) AS num_resenas_4,\n        SUM(CASE s.rating WHEN '3.0' THEN 1 ELSE 0 END) AS num_resenas_3,\n        SUM(CASE s.rating WHEN '2.0' THEN 1 ELSE 0 END) AS num_resenas_2,\n        SUM(CASE s.rating WHEN '1.0' THEN 1 ELSE 0 END) AS num_resenas_1\n    FROM MAESTROS.LINK_DATOS_PLACE_REVIEWS l \n    JOIN MAESTROS.SAT_DATOS_PLACE_REVIEW_TEXTOS s \n        ON s.hash_key_review_place = l.hash_key_review_place \n        AND s.ACTIVE_RECORD_INDICATOR = 'S'\n    GROUP BY \n        l.place_id,\n        DATEADD(day, -DATEPART(weekday, TRY_CONVERT(date, l.date_review)), TRY_CONVERT(date, l.date_review) ) \n),\nRankedResenasPorSemana AS (\n    SELECT *,\n        ROW_NUMBER() OVER(PARTITION BY place_id ORDER BY num_resenas_semana DESC) AS Rank\n    FROM ResenasPorSemana\n), ResenasPorPlace as (\nSELECT\n    r.place_id,    \n    MIN(r.semana) AS desde,\n    MAX(r.semana) AS hasta,\n    TRY_CONVERT (float, DATEDIFF(week, MIN(r.semana), MAX(r.semana)) ) AS semanas_historia,\n    TRY_CONVERT (float, COUNT(DISTINCT r.semana) ) AS num_semanas_con_resenas,\n    TRY_CONVERT(FLOAT,SUM(CASE WHEN r.num_resenas_5 > 0 THEN 1 ELSE 0 END)  ) AS num_semanas_con_resenas_5,\n    TRY_CONVERT(FLOAT,SUM(CASE WHEN r.num_resenas_1 > 0 THEN 1 ELSE 0 END) ) AS num_semanas_con_resenas_1,\n    TRY_CONVERT(FLOAT,SUM(r.num_resenas_semana) ) AS num_resenas,\n    TRY_CONVERT(FLOAT,SUM(r.num_comentarios)) AS comentarios,\n    TRY_CONVERT(FLOAT, SUM(r.num_respuestas) ) AS num_respuestas,\n    SUM(TRY_CONVERT (float,r.num_resenas_5) ) AS num_resenas_5,\n    SUM(TRY_CONVERT (float,r.num_resenas_4)) AS num_resenas_4,\n    SUM(TRY_CONVERT (float,r.num_resenas_3)) AS num_resenas_3,\n    SUM(TRY_CONVERT (float,r.num_resenas_2)) AS num_resenas_2,\n    SUM(TRY_CONVERT (float,r.num_resenas_1)) AS num_resenas_1,\n    TRY_CONVERT (float, SUM(CASE WHEN r.Rank = 1 THEN r.num_resenas_semana ELSE 0 END)) AS TotalResenasEnSemanaMasResenas,\n    TRY_CONVERT (float, SUM(CASE WHEN r.Rank = 1 THEN r.num_resenas_5 ELSE 0 END) ) AS Resenas_5_EnSemanaMasResenas,\n    TRY_CONVERT (float, SUM(CASE WHEN r.Rank = 1 THEN r.num_resenas_1 ELSE 0 END) )  AS Resenas_1_EnSemanaMasResenas,\n    -- Calcular el número de semanas con reseñas en el último año\n    TRY_CONVERT(float, SUM(CASE \n        WHEN DATEDIFF(month, r.semana, GETDATE()) < 12 THEN 1\n        ELSE 0 \n    END)) AS num_semanas_con_resenas_ultimo_12_meses,\n    TRY_CONVERT(FLOAT,SUM(CASE \n        WHEN DATEDIFF(month, r.semana, GETDATE()) < 12 THEN r.num_resenas_semana\n        ELSE 0 \n    END)) AS num_resenas_ultimo_12_meses\nFROM RankedResenasPorSemana r\nGROUP BY r.place_id )\nSELECT \n\tplace_id,\n    desde,\n    hasta, \n    semanas_historia,\n    num_semanas_con_resenas semanas_con_resenas,\n    num_resenas, \n    case \n    when semanas_historia > 52 then num_semanas_con_resenas_ultimo_12_meses/52 \n    when semanas_historia > 0 then num_semanas_con_resenas_ultimo_12_meses/semanas_historia \n    else 0 end  ratio_semanas_con_resenas_ult_12m,\n    case when num_resenas >0 then num_resenas_ultimo_12_meses/num_resenas else 0 end  ratio_resenas_ult_12m,\n    case when num_resenas >0 then comentarios/num_resenas else 0 end  ratio_resenas_comentadas,\n    case when comentarios >0 then num_respuestas/comentarios else 0 end  ratio_resenas_respondidas,\n    TotalResenasEnSemanaMasResenas max_rese_semana,\n    case when num_resenas >9 then (Resenas_5_EnSemanaMasResenas+ Resenas_1_EnSemanaMasResenas) /num_resenas else 0 end ratio_manipulacion,\n    case when num_resenas >9 and (Resenas_5_EnSemanaMasResenas+ Resenas_1_EnSemanaMasResenas) >0 then Resenas_5_EnSemanaMasResenas/(Resenas_5_EnSemanaMasResenas+ Resenas_1_EnSemanaMasResenas) else 0 end ratio_manipulacion_positiva,\n    case when num_resenas >9 and (Resenas_5_EnSemanaMasResenas+ Resenas_1_EnSemanaMasResenas) >0 then Resenas_1_EnSemanaMasResenas/(Resenas_5_EnSemanaMasResenas+ Resenas_1_EnSemanaMasResenas) else 0 end ratio_manipulacion_negativa,\n    num_resenas_5*5+num_resenas_4*4+num_resenas_3*3+num_resenas_2*2+num_resenas_1 popularidad_teorica,\n    (num_resenas_5-Resenas_5_EnSemanaMasResenas) *5+num_resenas_4*4+num_resenas_3*3+num_resenas_2*2+(num_resenas_1-Resenas_1_EnSemanaMasResenas) popularidad_real,\n    case when num_resenas>0 then (num_resenas_5*5+num_resenas_4*4+num_resenas_3*3+num_resenas_2*2+num_resenas_1)/num_resenas else 0 end ranking_teorico,\n    case \n\t    when num_resenas>9 then ((num_resenas_5-Resenas_5_EnSemanaMasResenas) *5+num_resenas_4*4+num_resenas_3*3+num_resenas_2*2+(num_resenas_1-Resenas_1_EnSemanaMasResenas))/num_resenas\n\t    when  num_resenas>0 then (num_resenas_5*5+num_resenas_4*4+num_resenas_3*3+num_resenas_2*2+num_resenas_1)/num_resenas\n\t    else 0 end ranking_real,    \n\t(num_resenas_5-Resenas_5_EnSemanaMasResenas) *5+num_resenas_4*4+num_resenas_3*3-num_resenas_2*2-(num_resenas_1-Resenas_1_EnSemanaMasResenas)*5 as satisfaccion_clientes_real\n\tinto calculos.datos_place_manipulacion_review_new\n\tFROM ResenasPorPlace;\ndrop table calculos.datos_place_manipulacion_review;\n\n\nEXEC farma.sys.sp_rename N'farma.calculos.datos_place_manipulacion_review_new', N'datos_place_manipulacion_review', 'OBJECT';\n\n\n\nSELECT place_id,\n    DATEADD(day, -DATEPART(weekday, TRY_CONVERT(date, date_review)), TRY_CONVERT(date, date_review)) AS semana , count(*) num_resenas_semana,\n    sum(case s.rating when '5.0' then 1 else 0 end) num_resenas_5,\n    sum(case s.rating when '1.0' then 1 else 0 end) num_resenas_1    \ninto calculos.datos_evolucion_resenas_new\n    FROM\n    MAESTROS.LINK_DATOS_PLACE_REVIEWS l \njoin MAESTROS.SAT_DATOS_PLACE_REVIEW_TEXTOS s on s.hash_key_review_place = l.hash_key_review_place and s.ACTIVE_RECORD_INDICATOR ='S' \n   group by DATEADD(day, -DATEPART(weekday, TRY_CONVERT(date, date_review)), TRY_CONVERT(date, date_review)), place_id\n\n \n\n  \ndrop table calculos.datos_evolucion_resenas;\n\n EXEC farma.sys.sp_rename N'farma.calculos.datos_evolucion_resenas_new', N'datos_evolucion_resenas', 'OBJECT';\n   \n\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "4 DWH- DM"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-17T19:34:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/farma')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/carga a tabla particionada catastro')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "carga datos a la particiones",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "OdbcSink",
								"writeBatchSize": 0
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "geo_area",
									"tabla": "datos_coordenadas_seccion_hist"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "geo_loc",
								"type": "DatasetReference",
								"parameters": {
									"tabladestino": "geo_area.datos_coordenadas_seccion_hist_01"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "99 Procesos puntuales"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-23T17:42:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]",
				"[concat(variables('factoryId'), '/datasets/geo_loc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/carga antiguo catastro')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT cod_agr_portales,\r\ncod_agr_tramos,\r\nref_cat_finca,\r\ncod_provin,\r\ncod_munici_dgc,\r\ncod_munici_ine,\r\nseccioncensal, \r\ncod_via_ine,\r\nprovincia, municipio, localidad, tipovia, literalvia, numportal, letraportal, segundo_num_via, segunda_letra, cod_postal,\r\ncast(replace(num_viviendas, ',','.') as int) num_viviendas,\r\ncast(replace(superf_media_viviendas, ',','.') as float) superf_media_viviendas,\r\ncast(replace(altura_viviendas, ',','.') as float) altura_viviendas,\r\ncast(replace(antiguedad_viviendas, ',','.') as float) antiguedad_viviendas,\r\ncast(replace(num_inmuebles, ',','.') as int) num_inmuebles,\r\nTRY_CONVERT(float, replace(superf_media_inmuebles, ',','.') ) superf_media_inmuebles,\r\nTRY_CONVERT(int, replace(altura_inmuebles, ',','.') ) altura_inmuebles,\r\nTRY_CONVERT(int, replace(antiguedad_inmuebles, ',','.') ) antiguedad_inmuebles,\r\nTRY_CONVERT(int, replace(num_comercios, ',','.') ) num_comercios,\r\nTRY_CONVERT(int, replace(num_oficinas, ',','.') ) num_oficinas,\r\n geo_gps_y_latitud, geo_gps_x_longitud, geo_gps_y_x,\r\nnum_gps_y_latitud, num_gps_x_longitud, num_int_latitud, num_int_longitud, zonacatastral,\r\ncast(replace(cod_zona_concent, ',','.') as int) cod_zona_concent,\r\n f_datos_catastrales, f_proceso_actualizacion\r\nFROM open_data.geo_area.tb_catastro_portales a\r\nwhere not exists ( select 1 from geo_area.tb_catastro_portales_nueva n where n.ref_cat_finca = a.ref_cat_finca )\r\norder by a.ref_cat_finca;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "storage_avron",
										"type": "LinkedServiceReference"
									},
									"path": "catastro"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "cod_agr_portales",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cod_agr_portales",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ref_cat_finca",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ref_cat_finca",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "cod_provin",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cod_provin",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "cod_munici_dgc",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cod_munici_dgc",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "cod_munici_ine",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cod_munici_ine",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "seccioncensal",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "seccioncensal",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "provincia",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "provincia",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "municipio",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "municipio",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "localidad",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "localidad",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "tipovia",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "tipovia",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "literalvia",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "literalvia",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "numportal",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "numportal",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "letraportal",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "letraportal",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "segundo_num_via",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "segundo_num_via",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "segunda_letra",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "segunda_letra",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "cod_postal",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cod_postal",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "num_viviendas",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "num_viviendas",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "superf_media_viviendas",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "superf_media_viviendas",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "antiguedad_viviendas",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "antiguedad_viviendas",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "num_inmuebles",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "num_inmuebles",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "superf_media_inmuebles",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "superf_media_inmuebles",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "antiguedad_inmuebles",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "antiguedad_inmuebles",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "num_comercios",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "num_comercios",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "num_oficinas",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "num_oficinas",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "geo_gps_y_latitud",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "geo_gps_y_latitud",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "geo_gps_x_longitud",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "geo_gps_x_longitud",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "geo_gps_y_x",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "geo_gps_y_x",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "num_gps_y_latitud",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "num_gps_y_latitud",
											"type": "Single",
											"physicalType": "real"
										}
									},
									{
										"source": {
											"name": "num_gps_x_longitud",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "num_gps_x_longitud",
											"type": "Single",
											"physicalType": "real"
										}
									},
									{
										"source": {
											"name": "zonacatastral",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "zonacatastral",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "cod_zona_concent",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "cod_zona_concent",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "f_datos_catastrales",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "f_datos_catastrales",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "f_proceso_actualizacion",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "f_proceso_actualizacion",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "1",
									"tabla": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "geo_area",
									"tabla": "tb_catastro_portales_nueva"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "99 Procesos puntuales"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-27T16:03:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]",
				"[concat(variables('factoryId'), '/linkedServices/storage_avron')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/carga calculos_datos_farmacias')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "farmacias",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference",
							"parameters": {
								"bbdd": "farma"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "\r\nCREATE TABLE farma.calculos.datos_farmacias_2 (\r\n\thash_codigo_centro nvarchar(64) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\r\n\tnombre_oficial nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n\tfecha_primera_apertura date NULL,\r\n\tfecha_ultimo_cambio_administrativo date NULL,\r\n\tdireccion_oficial nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n\tdireccion_normalizada nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n\tprecision_normalización float NULL,\r\n\tprecision_busqueda_place float NULL,\r\n\tlatitud float NULL,\r\n\tlongitud float NULL,\r\n\thorario nvarchar(MAX) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n\testado nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n\tplace_id nvarchar(150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n\tnombre_google nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n\tafluencia nvarchar(MAX) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n\tratio_valoracion nvarchar(MAX) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n\tcomentarios_por_ratio nvarchar(MAX) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n\tlink_centro nvarchar(MAX) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n\tinformacion_servicios nvarchar(MAX) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n\tServicios_centro nvarchar(MAX) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n\tgeo_coordenadas geography NULL\r\n\t);\r\n\r\n--TRUNCATE TABLE calculos.datos_farmacias_2;\r\n\r\n\r\n\r\nSELECT\r\nCOALESCE (s2.cod_bbdd, concat('sin_bbdd_', p.place_id)) cod_bbdd,\r\nCOALESCE (l.hash_codigo_centro, concat('sin_hash_centro_', p.place_id)) hash_codigo_centro,\r\nCOALESCE (s2.nombre_cod_bbdd , p.name) nombre_oficial,\r\np.place_id ,\r\nCOALESCE (s2.dir_normalizada_cod_farma, p.full_address) direccion_oficial,\r\nTRY_CONVERT(date, fecha_autorizacion_funcionamiento) AS   fecha_primera_apertura,\r\nTRY_CONVERT(date, fecha_ultima_autorizacion) AS  fecha_ultimo_cambio_administrativo,\r\np.full_address  direccion_normalizada,\r\ns2.semejanza_dir_place precision_normalización\r\n,(try_convert(float,s2.semejanza_dir_place) +try_convert(float,s2.semejanza_cp_place))/2  precision_busqueda_place,\r\nTRY_CONVERT(float,p.latitude) latitud,\r\nTRY_CONVERT(float,p.longitude) longitud,\r\np.working_hours horario,\r\np.business_status estado,\r\np.name  nombre_google,\r\np.popular_times afluencia,\r\np.rating ratio_valoracion,\r\np.reviews_per_score comentarios_por_ratio,\r\np.street_view link_centro,\r\np.about informacion_servicios\r\n,ser_cen.Servicios_centro\r\n--count(*) , count(DISTINCT p.place_id) , count( DISTINCT COALESCE(p.place_id, s2.cod_bbdd  , l.hash_codigo_centro  ) )\r\ninto calculos.temp_calculo_farmacias\r\nFROM farma.MAESTROS.pip_sat_place p\r\nleft  JOIN \r\n    (SELECT *, ROW_NUMBER() OVER (PARTITION BY place_id ORDER BY semejanza_dir_place DESC) as rn \r\n     FROM calculos.ranking_direcciones_normalizadas) as l ON l.place_id = p.place_id AND l.rn = 1\r\nleft JOIN \r\n    (SELECT *, ROW_NUMBER() OVER (PARTITION BY place_id ORDER BY semejanza_dir_place DESC) as rn \r\n     FROM farma.MAESTROS.sat_similitud_direcciones_cod_bbdd) as s2 ON s2.place_id = p.place_id AND s2.rn = 1\r\nleft join \r\n     MAESTROS.SAT_CENTRO_FECHAS_ADMIN s4 on s4.hash_codigo_centro= l.hash_codigo_centro and s4.ACTIVE_RECORD_INDICATOR ='S'\r\nleft join MAESTROS.referencia_ubicaciones_multicentros ser_cen on ser_cen.address_label= s2.dir_normalizada_cod_farma\r\nwhere     \"type\" IN('Pharmacy', 'Farmacia')  and TRY_CONVERT(float,p.latitude) is not null and TRY_CONVERT(float,p.longitude) is not null\r\n\r\n\r\n\r\n\r\ninsert into calculos.datos_farmacias_2 (hash_codigo_centro, nombre_oficial, fecha_primera_apertura, fecha_ultimo_cambio_administrativo, direccion_oficial, direccion_normalizada, precision_normalización, precision_busqueda_place, latitud, longitud, horario, estado,place_id, nombre_google, afluencia, ratio_valoracion, comentarios_por_ratio, link_centro, informacion_servicios, Servicios_centro, geo_coordenadas)\r\nSELECT \r\nhash_codigo_centro, nombre_oficial, fecha_primera_apertura, fecha_ultimo_cambio_administrativo, \r\ndireccion_oficial, direccion_normalizada, precision_normalización, precision_busqueda_place,\r\nlatitud, longitud, horario, estado,place_id, nombre_google, afluencia, ratio_valoracion,\r\ncomentarios_por_ratio, link_centro, informacion_servicios, Servicios_centro\r\n,geography::Point(latitud, longitud, 4326) AS geo_coordenadas\r\n--into calculos.datos_farmacias_2\r\nFROM calculos.temp_calculo_farmacias p\r\nJOIN (select DISTINCT golden_record from  MAESTROS.LINK_DUPLICADOS_PLACE_FARMACIAS L \r\njoin MAESTROS.SAT_DUPLICADOS_PLACE_FARMACIAS S ON S.key_link_deduplicados_farmas= L.key_link_deduplicados_farmas\r\nWHERE  proba_duplicado >0.55) DUP ON DUP.golden_record= p.place_id\r\nWHERE \r\n    p.latitud IS NOT NULL AND p.longitud IS NOT NULL\r\n    AND p.latitud BETWEEN -90 AND 90 AND p.longitud BETWEEN -180 AND 180\r\n;\r\nEXEC farma.sys.sp_rename N'farma.calculos.datos_farmacias', N'datos_farmacias_old', 'OBJECT';\r\nEXEC farma.sys.sp_rename N'farma.calculos.datos_farmacias_2', N'datos_farmacias', 'OBJECT';\r\n\r\ndrop table calculos.datos_farmacias_old;\r\ndrop table calculos.temp_calculo_farmacias;\r\n\r\n\r\nWITH CTE AS (\r\n    SELECT *,\r\n           ROW_NUMBER() OVER(PARTITION BY hash_codigo_centro  ORDER BY (SELECT NULL)) AS rn\r\n    FROM calculos.datos_farmacias\r\n)\r\nDELETE FROM CTE WHERE rn > 1;\r\n\r\n\r\nALTER TABLE calculos.datos_farmacias ADD CONSTRAINT PK_hash_codigo_centro PRIMARY KEY CLUSTERED (hash_codigo_centro);\r\nCREATE SPATIAL INDEX idx_geoespacial_datos_farmacia ON calculos.datos_farmacias(geo_coordenadas);\r\n\r\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "4 DWH- DM"
				},
				"annotations": [],
				"lastPublishTime": "2024-04-01T16:53:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/farma')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copia_catastro')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy catastro_fincas",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlSource"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF OBJECT_ID('geo_area.tb_catastro_portales_nueva', 'U') IS NOT NULL\nBEGIN\n    DROP TABLE geo_area.tb_catastro_portales_nueva;\nEND\n",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"path": "catastro"
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "geol_loc",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "geo_area",
									"tabla": "tb_catastro_portales_nueva"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": "geo_area",
									"tabla": "tb_catastro_portales_nueva"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "99 Procesos puntuales"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-27T16:40:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/geol_loc')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_lake_to_bbdd_csv_carpeta')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM sys.tables WHERE name = '@{pipeline().parameters.tabla}' AND type = 'U')\nBEGIN\n    \tdrop TABLE @{pipeline().parameters.esquema}.@{pipeline().parameters.tabla};\n\tEND",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_Lake_tab",
								"type": "DatasetReference",
								"parameters": {
									"directorio": {
										"value": "@pipeline().parameters.directorio",
										"type": "Expression"
									},
									"contenedor": {
										"value": "@pipeline().parameters.contenedor",
										"type": "Expression"
									},
									"fichero": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": {
										"value": "@pipeline().parameters.esquema",
										"type": "Expression"
									},
									"tabla": {
										"value": "@pipeline().parameters.tabla",
										"type": "Expression"
									},
									"bbdd": {
										"value": "@pipeline().parameters.bbdd",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"contenedor": {
						"type": "string",
						"defaultValue": "salud"
					},
					"directorio": {
						"type": "string",
						"defaultValue": "direcciones/zonas_influencia"
					},
					"esquema": {
						"type": "string",
						"defaultValue": "staging"
					},
					"tabla": {
						"type": "string",
						"defaultValue": "zonas_influencia"
					},
					"bbdd": {
						"type": "string",
						"defaultValue": "farma"
					}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2024-01-26T11:11:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_Lake_tab')]",
				"[concat(variables('factoryId'), '/datasets/farma')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_lake_to_bbdd_csv_carpeta_comas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM sys.tables WHERE name = '@{pipeline().parameters.tabla}' AND type = 'U')\nBEGIN\n    \tdrop TABLE @{pipeline().parameters.esquema}.@{pipeline().parameters.tabla};\n\tEND",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_Lake_coma",
								"type": "DatasetReference",
								"parameters": {
									"directorio": {
										"value": "@pipeline().parameters.directorio",
										"type": "Expression"
									},
									"contenedor": {
										"value": "@pipeline().parameters.contenedor",
										"type": "Expression"
									},
									"fichero": "1"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": {
										"value": "@pipeline().parameters.esquema",
										"type": "Expression"
									},
									"tabla": {
										"value": "@pipeline().parameters.tabla",
										"type": "Expression"
									},
									"bbdd": {
										"value": "@pipeline().parameters.bbdd",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"contenedor": {
						"type": "string",
						"defaultValue": "salud"
					},
					"directorio": {
						"type": "string",
						"defaultValue": "direcciones/zonas_influencia"
					},
					"esquema": {
						"type": "string",
						"defaultValue": "staging"
					},
					"tabla": {
						"type": "string",
						"defaultValue": "zonas_influencia"
					},
					"bbdd": {
						"type": "string",
						"defaultValue": "farma"
					}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2024-01-26T11:11:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_Lake_coma')]",
				"[concat(variables('factoryId'), '/datasets/farma')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_lake_to_bbdd_parquet_carpeta')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM sys.tables WHERE name = '@{pipeline().parameters.tabla}' AND type = 'U')\nBEGIN\n    \tdrop TABLE @{pipeline().parameters.esquema}.@{pipeline().parameters.tabla};\n\tEND",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivos_parquet",
								"type": "DatasetReference",
								"parameters": {
									"contenedor": {
										"value": "@pipeline().parameters.contenedor",
										"type": "Expression"
									},
									"directorio": {
										"value": "@pipeline().parameters.directorio",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": {
										"value": "@pipeline().parameters.esquema",
										"type": "Expression"
									},
									"tabla": {
										"value": "@pipeline().parameters.tabla",
										"type": "Expression"
									},
									"bbdd": {
										"value": "@pipeline().parameters.bbdd",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"contenedor": {
						"type": "string",
						"defaultValue": "salud"
					},
					"directorio": {
						"type": "string",
						"defaultValue": "direcciones/zonas_influencia"
					},
					"esquema": {
						"type": "string",
						"defaultValue": "staging"
					},
					"tabla": {
						"type": "string",
						"defaultValue": "zonas_influencia"
					},
					"bbdd": {
						"type": "string",
						"defaultValue": "farma"
					}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-12T16:05:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivos_parquet')]",
				"[concat(variables('factoryId'), '/datasets/farma')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_lake_to_farma')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM sys.tables WHERE name = '@{pipeline().parameters.tabla}' AND type = 'U')\nBEGIN\n    \tdrop TABLE @{pipeline().parameters.esquema}.@{pipeline().parameters.tabla};\n\tEND",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_Lake_tab",
								"type": "DatasetReference",
								"parameters": {
									"directorio": {
										"value": "@pipeline().parameters.directorio",
										"type": "Expression"
									},
									"contenedor": {
										"value": "@pipeline().parameters.contenedor",
										"type": "Expression"
									},
									"fichero": {
										"value": "@pipeline().parameters.fichero",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": {
										"value": "@pipeline().parameters.esquema",
										"type": "Expression"
									},
									"tabla": {
										"value": "@pipeline().parameters.tabla",
										"type": "Expression"
									},
									"bbdd": "farma"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"contenedor": {
						"type": "string",
						"defaultValue": "pois"
					},
					"directorio": {
						"type": "string",
						"defaultValue": "scraping"
					},
					"fichero": {
						"type": "string",
						"defaultValue": "datos_backup.csv"
					},
					"esquema": {
						"type": "string",
						"defaultValue": "staging"
					},
					"tabla": {
						"type": "string",
						"defaultValue": "pois_scraping"
					}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-01T18:22:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_Lake_tab')]",
				"[concat(variables('factoryId'), '/datasets/farma')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_lake_to_farma_comas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM sys.tables WHERE name = '@{pipeline().parameters.tabla}' AND type = 'U')\nBEGIN\n    \tdrop TABLE @{pipeline().parameters.esquema}.@{pipeline().parameters.tabla};\n\tEND",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_comas",
								"type": "DatasetReference",
								"parameters": {
									"directorio": {
										"value": "@pipeline().parameters.directorio",
										"type": "Expression"
									},
									"contenedor": {
										"value": "@pipeline().parameters.contenedor",
										"type": "Expression"
									},
									"fichero": {
										"value": "@pipeline().parameters.fichero",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": {
										"value": "@pipeline().parameters.esquema",
										"type": "Expression"
									},
									"tabla": {
										"value": "@pipeline().parameters.tabla",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"contenedor": {
						"type": "string",
						"defaultValue": "pois"
					},
					"directorio": {
						"type": "string",
						"defaultValue": "scraping"
					},
					"fichero": {
						"type": "string",
						"defaultValue": "datos_backup.csv"
					},
					"esquema": {
						"type": "string",
						"defaultValue": "staging"
					},
					"tabla": {
						"type": "string",
						"defaultValue": "pois_scraping"
					}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-15T16:34:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_comas')]",
				"[concat(variables('factoryId'), '/datasets/farma')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_lake_to_farma_parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM sys.tables WHERE name = '@{pipeline().parameters.tabla}' AND type = 'U')\nBEGIN\n    \tdrop TABLE @{pipeline().parameters.esquema}.@{pipeline().parameters.tabla};\n\tEND",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivos_parquet",
								"type": "DatasetReference",
								"parameters": {
									"contenedor": {
										"value": "@pipeline().parameters.contenedor",
										"type": "Expression"
									},
									"directorio": {
										"value": "@pipeline().parameters.directorio",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "farma",
								"type": "DatasetReference",
								"parameters": {
									"esquema": {
										"value": "@pipeline().parameters.esquema",
										"type": "Expression"
									},
									"tabla": {
										"value": "@pipeline().parameters.tabla",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"contenedor": {
						"type": "string",
						"defaultValue": "salud"
					},
					"directorio": {
						"type": "string",
						"defaultValue": "direcciones/zonas_influencia"
					},
					"esquema": {
						"type": "string",
						"defaultValue": "staging"
					},
					"tabla": {
						"type": "string",
						"defaultValue": "zonas_influencia"
					}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2024-01-11T12:38:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivos_parquet')]",
				"[concat(variables('factoryId'), '/datasets/farma')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_lake_to_opendata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM sys.tables WHERE name = '@{pipeline().parameters.tabla}' AND type = 'U')\nBEGIN\n    \tdrop TABLE @{pipeline().parameters.esquema}.@{pipeline().parameters.tabla};\n\tEND",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_Lake_tab",
								"type": "DatasetReference",
								"parameters": {
									"directorio": {
										"value": "@pipeline().parameters.directorio",
										"type": "Expression"
									},
									"contenedor": {
										"value": "@pipeline().parameters.contenedor",
										"type": "Expression"
									},
									"fichero": {
										"value": "@pipeline().parameters.fichero",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": {
										"value": "@pipeline().parameters.esquema",
										"type": "Expression"
									},
									"tabla": {
										"value": "@pipeline().parameters.tabla",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"contenedor": {
						"type": "string",
						"defaultValue": "pois"
					},
					"directorio": {
						"type": "string",
						"defaultValue": "scraping"
					},
					"fichero": {
						"type": "string",
						"defaultValue": "datos_backup.csv"
					},
					"esquema": {
						"type": "string",
						"defaultValue": "staging"
					},
					"tabla": {
						"type": "string",
						"defaultValue": "pois_scraping"
					}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-22T17:32:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_Lake_tab')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_lake_to_opendata_comas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "LOAD_DTS",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF EXISTS (SELECT * FROM sys.tables WHERE name = '@{pipeline().parameters.tabla}' AND type = 'U')\nBEGIN\n    \tdrop TABLE @{pipeline().parameters.esquema}.@{pipeline().parameters.tabla};\n\tEND",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									},
									"path": ""
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "archivo_texto_Data_comas",
								"type": "DatasetReference",
								"parameters": {
									"directorio": {
										"value": "@pipeline().parameters.directorio",
										"type": "Expression"
									},
									"contenedor": {
										"value": "@pipeline().parameters.contenedor",
										"type": "Expression"
									},
									"fichero": {
										"value": "@pipeline().parameters.fichero",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": {
										"value": "@pipeline().parameters.esquema",
										"type": "Expression"
									},
									"tabla": {
										"value": "@pipeline().parameters.tabla",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"contenedor": {
						"type": "string",
						"defaultValue": "pois"
					},
					"directorio": {
						"type": "string",
						"defaultValue": "scraping"
					},
					"fichero": {
						"type": "string",
						"defaultValue": "datos_backup.csv"
					},
					"esquema": {
						"type": "string",
						"defaultValue": "staging"
					},
					"tabla": {
						"type": "string",
						"defaultValue": "pois_scraping"
					}
				},
				"folder": {
					"name": "2 DL to STG"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-15T16:34:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_comas')]",
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ejecuta_actualizacion sat_place_scraping')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "data_lake_to_farma_comas",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "data_lake_to_farma_comas",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"fichero": "backup_scraping650.csv"
							}
						}
					},
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "data_lake_to_farma_comas",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "farma",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "INSERT INTO MAESTROS.link_hash_direccion_place\r\nSELECT DISTINCT F.hash_direccion,  F.place_id,  LOAD_DTS START_DTS, NULL END_DTS\r\n--into MAESTROS.link_hash_direccion_place\r\nFROM farma.staging.pois_farmas F\r\nWHERE NOT EXISTS (SELECT 1 FROM MAESTROS.link_hash_direccion_place L WHERE L.hash_direccion= F.hash_direccion AND L.place_id= F.place_id);\r\n\r\nWITH CTE AS (\r\n    SELECT *,\r\n           ROW_NUMBER() OVER(PARTITION BY concat(hash_direccion,place_id) ORDER BY (SELECT NULL)) AS rn\r\n    FROM MAESTROS.link_hash_direccion_place\r\n)\r\nDELETE FROM CTE WHERE rn > 1;\r\n\r\nINSERT INTO MAESTROS.SAT_DATOS_PLACE_NO_VOLATILES\r\nSELECT DISTINCT place_id, name, google_id, full_address, borough, street, postal_code, area_service, country_code,\r\ncountry, city, us_state, state, plus_code, latitude, longitude, time_zone,\r\nCONVERT(NVARCHAR(64), HASHBYTES('SHA2_256', CAST(LTRIM(RTRIM(CONCAT(name, google_id, full_address, borough, street, postal_code, area_service, country_code,\r\ncountry, city, us_state, state, plus_code, latitude, longitude, time_zone))) AS NVARCHAR(100))), 2) AS hash_diff_no_volatiles,\r\nCAST(LOAD_DTS AS DATE) AS EFFECTIVE_DATETIME, CAST(NULL AS DATE) AS EXPIRY_DATETIME,\r\n'staging.pois_farmas' AS ETL_PROCESS_ID,\r\n'S' AS ACTIVE_RECORD_INDICATOR\r\n--INTO MAESTROS.SAT_DATOS_PLACE_NO_VOLATILES_2\r\nFROM staging.pois_farmas_hd f\r\nWHERE (name IS NOT NULL OR google_id IS NOT NULL OR full_address IS NOT NULL OR borough IS NOT NULL OR street IS NOT NULL OR \r\npostal_code IS NOT NULL OR area_service IS NOT NULL OR country_code IS NOT NULL OR country IS NOT NULL OR city IS NOT NULL OR \r\nus_state IS NOT NULL OR state IS NOT NULL OR plus_code IS NOT NULL OR latitude IS NOT NULL OR longitude IS NOT NULL OR time_zone IS NOT NULL)\r\nAND place_id IS NOT NULL\r\nAND NOT EXISTS (\r\n    SELECT 1 \r\n    FROM MAESTROS.SAT_DATOS_PLACE_NO_VOLATILES s \r\n    WHERE f.place_id = s.place_id \r\n    AND f.hash_diff_no_volatiles = s.hash_diff_no_volatiles\r\n);\r\n\r\nINSERT INTO MAESTROS.SAT_DATOS_PLACE_VOLATILES\r\nSELECT DISTINCT place_id, site, phone, [type], logo, description, typical_time_spent, located_in, located_google_id, \r\ncategory, subtypes, posts, photos_count, cid, reviews_link, reviews_id, photo, street_view, about, [range], \r\nreservation_links, booking_appointment_link, menu_link, order_links, owner_id,\r\nverified, owner_title, owner_link, location_link,\r\nCONVERT(NVARCHAR(64), HASHBYTES('SHA2_256', CAST(LTRIM(RTRIM(CONCAT(site, phone, [type], logo, description, typical_time_spent, located_in, located_google_id, \r\ncategory, subtypes, posts, photos_count, cid, reviews_link, reviews_id, photo, street_view, about, [range], reservation_links, booking_appointment_link, menu_link, order_links, owner_id,\r\nverified, owner_title, owner_link, location_link))) AS NVARCHAR(100))), 2) AS hash_diff_volatiles,\r\nCAST(LOAD_DTS AS DATE) AS EFFECTIVE_DATETIME, CAST(NULL AS DATE) AS EXPIRY_DATETIME,\r\n'staging.pois_farmas' AS ETL_PROCESS_ID,\r\n'S' AS ACTIVE_RECORD_INDICATOR\r\n--into MAESTROS.SAT_DATOS_PLACE_VOLATILES_2\r\nFROM staging.pois_farmas_hd f\r\nWHERE (site IS NOT NULL OR phone IS NOT NULL OR [type] IS NOT NULL OR logo IS NOT NULL OR description IS NOT NULL OR \r\ntypical_time_spent IS NOT NULL OR located_in IS NOT NULL OR located_google_id IS NOT NULL OR category IS NOT NULL OR \r\nsubtypes IS NOT NULL OR posts IS NOT NULL OR photos_count IS NOT NULL OR cid IS NOT NULL OR reviews_link IS NOT NULL OR \r\nreviews_id IS NOT NULL OR photo IS NOT NULL OR street_view IS NOT NULL OR about IS NOT NULL OR [range] IS NOT NULL OR \r\nreservation_links IS NOT NULL OR booking_appointment_link IS NOT NULL OR menu_link IS NOT NULL OR order_links IS NOT NULL OR \r\nowner_id IS NOT NULL OR verified IS NOT NULL OR owner_title IS NOT NULL OR owner_link IS NOT NULL OR location_link IS NOT NULL)\r\nAND place_id IS NOT NULL\r\nAND NOT EXISTS (\r\n    SELECT 1 \r\n    FROM MAESTROS.SAT_DATOS_PLACE_VOLATILES s \r\n    WHERE f.place_id = s.place_id \r\n    AND f.hash_diff_volatiles = s.hash_diff_volatiles\r\n);\r\n\r\n\r\nWITH CTE AS (\r\n    SELECT *,\r\n           ROW_NUMBER() OVER(PARTITION BY place_id ORDER BY (SELECT NULL)) AS rn\r\n    FROM MAESTROS.SAT_DATOS_PLACE_VOLATILES\r\n)\r\nDELETE FROM CTE WHERE rn > 1;\r\n\r\nINSERT INTO MAESTROS.SAT_DATOS_PLACE_AFLUENCIA\r\nSELECT DISTINCT place_id,  popular_times,typical_time_spent,\r\nCONVERT(NVARCHAR(64), HASHBYTES('SHA2_256', CAST( LTRIM(RTRIM(concat(popular_times, typical_time_spent))) AS NVARCHAR(100))), 2) AS hash_diff_popular_time,\r\ncast(LOAD_DTS as date)  EFFECTIVE_DATETIME , CAST(NULL AS DATE) EXPIRY_DATETIME,\r\n'staging.pois_farmas' ETL_PROCESS_ID,\r\n'S' ACTIVE_RECORD_INDICATOR\r\n--INTO MAESTROS.SAT_DATOS_PLACE_AFLUENCIA\r\nFROM staging.pois_farmas_hd f\r\nWHERE popular_times IS NOT NULL and place_id is not null\r\nand NOT EXISTS (SELECT 1 FROM MAESTROS.SAT_DATOS_PLACE_AFLUENCIA s WHERE f.place_id= s.place_id and f.hash_diff_popular_time=s.hash_diff_popular_time );\r\n\r\nINSERT INTO MAESTROS.SAT_DATOS_PLACE_AFLUENCIA\r\nSELECT DISTINCT place_id,  popular_times,typical_time_spent,\r\nCONVERT(NVARCHAR(64), HASHBYTES('SHA2_256', CAST( LTRIM(RTRIM(concat(popular_times, typical_time_spent))) AS NVARCHAR(100))), 2) AS hash_diff_popular_time,\r\ncast(LOAD_DTS as date)  EFFECTIVE_DATETIME , CAST(NULL AS DATE) EXPIRY_DATETIME,\r\n'popular_time_scrapi' ETL_PROCESS_ID,\r\n'S' ACTIVE_RECORD_INDICATOR\r\n--INTO MAESTROS.SAT_DATOS_PLACE_AFLUENCIA\r\nFROM staging.popular_time_scraping_hd f\r\nWHERE popular_times IS NOT NULL and place_id is not null\r\nand NOT EXISTS (SELECT 1 FROM MAESTROS.SAT_DATOS_PLACE_AFLUENCIA s WHERE f.place_id= s.place_id and f.hash_diff_popular_time=s.hash_diff_popular_time );\r\n\r\n\r\n\r\n\r\nWITH CTE AS (\r\n    SELECT *,\r\n           ROW_NUMBER() OVER(PARTITION BY concat(place_id,hash_diff_popular_time) ORDER BY (SELECT NULL)) AS rn\r\n    FROM MAESTROS.SAT_DATOS_PLACE_AFLUENCIA\r\n)\r\nDELETE FROM CTE WHERE rn > 1;\r\n\r\n\r\nINSERT INTO MAESTROS.SAT_DATOS_PLACE_REVIEWS\r\nSELECT DISTINCT place_id, rating, reviews, reviews_tags, reviews_per_score,\r\nCONVERT(NVARCHAR(64), HASHBYTES('SHA2_256', CAST(LTRIM(RTRIM(CONCAT(rating, reviews, reviews_tags, reviews_per_score))) AS NVARCHAR(100))), 2) AS hash_diff_review,\r\nCAST(LOAD_DTS AS DATE) AS EFFECTIVE_DATETIME, CAST(NULL AS DATE) AS EXPIRY_DATETIME,\r\n'staging.pois_farmas' AS ETL_PROCESS_ID,\r\n'S' AS ACTIVE_RECORD_INDICATOR\r\n--INTO MAESTROS.SAT_DATOS_PLACE_REVIEWS\r\nFROM staging.pois_farmas_hd f\r\nWHERE rating IS NOT NULL AND place_id IS NOT NULL\r\nAND NOT EXISTS (\r\n    SELECT 1 \r\n    FROM MAESTROS.SAT_DATOS_PLACE_REVIEWS s \r\n    WHERE f.place_id = s.place_id \r\n    AND f.hash_diff_review = s.hash_diff_review\r\n);\r\n\r\nINSERT INTO MAESTROS.SAT_DATOS_PLACE_HOURS\r\nSELECT DISTINCT place_id, working_hours_old_format, working_hours, other_hours, business_status,\r\nCONVERT(NVARCHAR(64), HASHBYTES('SHA2_256', CAST(LTRIM(RTRIM(CONCAT(working_hours_old_format, working_hours, other_hours, business_status))) AS NVARCHAR(100))), 2) AS hash_diff_hours,\r\nCAST(LOAD_DTS AS DATE) AS EFFECTIVE_DATETIME, CAST(NULL AS DATE) AS EXPIRY_DATETIME,\r\n'staging.pois_farmas' AS ETL_PROCESS_ID,\r\n'S' AS ACTIVE_RECORD_INDICATOR\r\n--into MAESTROS.SAT_DATOS_PLACE_HOURS\r\nFROM staging.pois_farmas_hd f--staging.pois_farmas_hd f\r\nWHERE (working_hours_old_format IS NOT NULL OR working_hours IS NOT NULL OR other_hours IS NOT NULL OR business_status IS NOT NULL)\r\nAND place_id IS NOT NULL\r\nAND NOT EXISTS (\r\n    SELECT 1 \r\n    FROM MAESTROS.SAT_DATOS_PLACE_HOURS s \r\n    WHERE f.place_id = s.place_id \r\n    AND f.hash_diff_hours = s.hash_diff_hours\r\n);\r\n\r\n\r\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "99 Procesos puntuales"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-15T16:34:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/data_lake_to_farma_comas')]",
				"[concat(variables('factoryId'), '/linkedServices/farma')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/opensql_to_datalake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copiar_a_data_lake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DWH_open_data",
								"type": "DatasetReference",
								"parameters": {
									"esquema": {
										"value": "@pipeline().parameters.esquema",
										"type": "Expression"
									},
									"tabla": {
										"value": "@pipeline().parameters.tabla",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "archivo_texto_Data_comas",
								"type": "DatasetReference",
								"parameters": {
									"directorio": {
										"value": "@pipeline().parameters.directorio",
										"type": "Expression"
									},
									"contenedor": {
										"value": "@pipeline().parameters.contenedor",
										"type": "Expression"
									},
									"fichero": {
										"value": "@pipeline().parameters.fichero",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"esquema": {
						"type": "string",
						"defaultValue": "CATASTRO"
					},
					"tabla": {
						"type": "string",
						"defaultValue": "link_portales_fincas_secciones"
					},
					"contenedor": {
						"type": "string"
					},
					"directorio": {
						"type": "string"
					},
					"fichero": {
						"type": "string"
					}
				},
				"folder": {
					"name": "99 Procesos puntuales"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-18T17:34:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DWH_open_data')]",
				"[concat(variables('factoryId'), '/datasets/archivo_texto_Data_comas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/APK2DB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "APK2DB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ESQUEMA": {
						"type": "string"
					},
					"TABLA": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().ESQUEMA",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TABLA",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/APK2DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Avro1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_avron",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directorio": {
						"type": "string"
					},
					"fichero": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fichero",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directorio",
							"type": "Expression"
						},
						"fileSystem": "aemet"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_avron')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDataDestinationStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your data destination store.  ",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDataSourceStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your data source store. ",
				"linkedServiceName": {
					"referenceName": "storage_avron",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_avron')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWH_open_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_open_data",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"esquema": {
						"type": "string"
					},
					"tabla": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().esquema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tabla",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_open_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText_comas')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "tb_catastro_portales",
						"fileSystem": "catastro"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "'"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel_en_Data_lake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"contenedor": {
						"type": "string"
					},
					"directorio": {
						"type": "string"
					},
					"hoja": {
						"type": "string"
					},
					"archivo": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().hoja",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().archivo",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().contenedor",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/archivo_texto_Data_Lake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_avron",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directorio": {
						"type": "string"
					},
					"contenedor": {
						"type": "string"
					},
					"fichero": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fichero",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directorio",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().contenedor",
							"type": "Expression"
						}
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": ";Municipios;Distritos;Secciones;Distribución por fuente de ingresos;Periodo;Total",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_avron')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/archivo_texto_Data_Lake_coma')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_avron",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directorio": {
						"type": "string"
					},
					"contenedor": {
						"type": "string"
					},
					"fichero": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fichero",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directorio",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().contenedor",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_avron')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/archivo_texto_Data_Lake_tab')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_avron",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directorio": {
						"type": "string"
					},
					"contenedor": {
						"type": "string"
					},
					"fichero": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fichero",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directorio",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().contenedor",
							"type": "Expression"
						}
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_avron')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/archivo_texto_Data_comas')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_avron",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directorio": {
						"type": "string"
					},
					"contenedor": {
						"type": "string"
					},
					"fichero": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fichero",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directorio",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().contenedor",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": ";Municipios;Distritos;Secciones;Distribución por fuente de ingresos;Periodo;Total",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_avron')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/archivo_texto_Data_comas_copy1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storage_avron",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directorio": {
						"type": "string"
					},
					"contenedor": {
						"type": "string"
					},
					"fichero": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fichero",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directorio",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().contenedor",
							"type": "Expression"
						}
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": ";Municipios;Distritos;Secciones;Distribución por fuente de ingresos;Periodo;Total",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storage_avron')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/archivos_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"contenedor": {
						"type": "string",
						"defaultValue": "salud"
					},
					"directorio": {
						"type": "string",
						"defaultValue": "direcciones/zonas_influencia"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "maestro_farmacia",
						"folderPath": {
							"value": "@dataset().directorio",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().contenedor",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/backupfarmades')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "backupfarmades",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Hoja1",
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "MAESTRO_FARMACIAS.xlsx",
						"folderPath": "BBC001/MAESTRO_FARMACIAS"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/backupfarmades')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/farma')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "farma",
					"type": "LinkedServiceReference",
					"parameters": {
						"bbdd": {
							"value": "@dataset().bbdd",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"esquema": {
						"type": "string"
					},
					"tabla": {
						"type": "string"
					},
					"bbdd": {
						"type": "string",
						"defaultValue": "farma"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().esquema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tabla",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/farma')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/geo_loc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Odbc1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tabladestino": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@dataset().tabladestino",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Odbc1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/geol_loc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "geoloc_desarrollo",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"esquema": {
						"type": "string"
					},
					"tabla": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().esquema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tabla",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/geoloc_desarrollo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/performance')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pefformance",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"esquema": {
						"type": "string"
					},
					"tabla": {
						"type": "string"
					},
					"bbdd": {
						"type": "string",
						"defaultValue": "farma"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().esquema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tabla",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pefformance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scr_aemet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "scr_aemet",
					"type": "LinkedServiceReference",
					"parameters": {
						"url_datos_aemet": {
							"value": "@dataset().url_datos_aemet",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"url_datos_aemet": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/scr_aemet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AFAemet')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AFAemet_properties_typeProperties_functionAppUrl')]",
					"authentication": "Anonymous",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AFAemet_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/APK2DB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('APK2DB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWH_open_data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('DWH_open_data_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Odbc1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Odbc",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('Odbc1_connectionString')]"
					},
					"authenticationType": "Basic",
					"userName": "[parameters('Odbc1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Odbc1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "nvqltintruntimedes",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/nvqltintruntimedes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/backupfarmades')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('backupfarmades_connectionString')]",
					"fileShare": "backupfarmades"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/farma')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"bbdd": {
						"type": "string",
						"defaultValue": "farma"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('farma_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/geoloc_desarrollo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('geoloc_desarrollo_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntimelocal",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimelocal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/nvqltalmactempfarmades')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('nvqltalmactempfarmades_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pefformance')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('pefformance_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/scr_aemet')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"url_datos_aemet": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('scr_aemet_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_avron')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('storage_avron_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('storage_avron_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIARIO')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "5 AEMET OBSERVACION_DIARIA",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "2 copia maestro_farmacias_excel",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-11-28T18:29:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								20
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/5 AEMET OBSERVACION_DIARIA')]",
				"[concat(variables('factoryId'), '/pipelines/2 copia maestro_farmacias_excel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PREDICCION_AEMET')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "5 AEMET PREDICCION_DIARIA",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-02-20T11:42:00",
						"timeZone": "Romance Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								0
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/5 AEMET PREDICCION_DIARIA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/todas las noches a las 2')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "actualiza zonas_influencias",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-03-17T17:38:00",
						"endTime": "2024-03-23T17:38:00",
						"timeZone": "Romance Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/actualiza zonas_influencias')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/todos_los_viernes_tarde')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-10-23T18:14:00",
						"timeZone": "W. Europe Standard Time",
						"schedule": {
							"hours": [
								20
							],
							"weekDays": [
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "copia_catastro",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "2 Rutas Sanitarias",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "5 recrea ine",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-10-19T08:11:00",
						"endTime": "2023-10-26T17:11:00",
						"timeZone": "Romance Standard Time",
						"schedule": {
							"minutes": [
								55
							],
							"hours": [
								23
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/copia_catastro')]",
				"[concat(variables('factoryId'), '/pipelines/2 Rutas Sanitarias')]",
				"[concat(variables('factoryId'), '/pipelines/5 recrea ine')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger2')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "carga a tabla particionada catastro",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-05-23T17:39:00",
						"endTime": "2023-05-24T17:39:00",
						"timeZone": "Romance Standard Time",
						"schedule": {
							"minutes": [
								50
							],
							"hours": [
								23
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/carga a tabla particionada catastro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger3')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ejecuta_actualizacion sat_place_scraping",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2023-11-30T07:57:00",
						"endTime": "2023-11-30T18:57:00",
						"timeZone": "Romance Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ejecuta_actualizacion sat_place_scraping')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger4_borrar')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 15,
						"startTime": "2024-02-01T18:43:00",
						"endTime": "2024-02-02T18:43:00",
						"timeZone": "Romance Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								23
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntimelocal')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/nvqltintruntimedes')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "Integration runtime acceso red interna nvqlt",
				"typeProperties": {}
			},
			"dependsOn": []
		}
	]
}